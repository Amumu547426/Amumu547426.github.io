<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>软件工程复习</title>
      <link href="/amumu547426.github.io/2020/07/09/SE/"/>
      <url>/amumu547426.github.io/2020/07/09/SE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\amumu547426.github.io\assets\css\APlayer.min.css"><script src="\amumu547426.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\amumu547426.github.io\assets\js\Meting.min.js"></script><h3 id="软件工程概论"><a href="#软件工程概论" class="headerlink" title="软件工程概论"></a>软件工程概论</h3><h4 id="软件基本概念"><a href="#软件基本概念" class="headerlink" title="软件基本概念"></a>软件基本概念</h4><ul><li>概念：软件由一组对象或项目所形成的一个配置，有程序、文档和数据等部分构成。</li><li>分类：软件分为应用软件、支撑软件和系统软件。</li><li>特征：复杂性、不可见性、易变性、一致性。</li></ul><h4 id="软件工程产生的历史根源"><a href="#软件工程产生的历史根源" class="headerlink" title="软件工程产生的历史根源"></a>软件工程产生的历史根源</h4><ul><li>大型软件系统开发会经常遇到“焦油坑”</li><li>没有银弹</li><li>软件危机：计算机软件的开发和维护过程所遇到的一系列严重问题</li></ul><h4 id="软件工程概念"><a href="#软件工程概念" class="headerlink" title="软件工程概念"></a>软件工程概念</h4><p>（IEEE）软件工程是：将系统性的、规范化的、可定量的方法应用于软件的开发、运行和维护，即将工程化应用到软件上。</p><ul><li>范围：软件开发过程（设计、开发、运行、维护）；软件开发中应遵循的原则和管理技术；软件开发中所采用的技术和工具</li><li>目标：高质量，按时交付，控制成本，满足用户需求</li></ul><h4 id="软件开发方法"><a href="#软件开发方法" class="headerlink" title="软件开发方法"></a>软件开发方法</h4><ul><li>结构化开发方法SADT</li><li>面向对象开发方法OOAD</li><li>面向服务的软件开发方法SOSE</li></ul><h3 id="软件工程核心思想"><a href="#软件工程核心思想" class="headerlink" title="软件工程核心思想"></a>软件工程核心思想</h3><h4 id="软件工程本质"><a href="#软件工程本质" class="headerlink" title="软件工程本质"></a>软件工程本质</h4><p>软件系统开发的本质是从现实空间的需求到计算机空间的软件代码之间的映射与转换，映射可分为单步映射和多步映射。</p><p>软件工程的本质：用严格的规范和管理手段来缩小偏差，通过牺牲时间来提高质量</p><ul><li>概念映射：问题空间的概念与解空间的模型化概念之间的映射</li><li>业务逻辑映射：问题空间的处理与解空间处理逻辑之间的映射</li></ul><h4 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h4><p>不同抽象层次之间的映射过程。</p><ul><li>需求分析</li><li>软件设计</li><li>实现</li><li>验证/确认</li></ul><h4 id="软件工程关注的目标"><a href="#软件工程关注的目标" class="headerlink" title="软件工程关注的目标"></a>软件工程关注的目标</h4><ul><li>功能性需求：软件所实现的功能达到它的设计规范和满足用户需求的程度<ul><li>完备性：软件能够支持用户所需求的全部功能的能力</li><li>正确性：软件按照需求正确执行任务的能力</li><li>健壮性：在异常情况下能够正常运行的能力，容错能力，恢复能力</li><li>可靠性：在给定的时间和条件下，软件能够正常维持其工作而不发生故障的能力</li></ul></li><li>非功能性需求：系统能够完成所期望的工作的性能与质量<ul><li>效率、可用性、可维护性、可移植性、清晰性、安全性、兼容性、经济性……</li></ul></li></ul><h4 id="软件工程-最佳实践"><a href="#软件工程-最佳实践" class="headerlink" title="软件工程=最佳实践"></a>软件工程=最佳实践</h4><ul><li>迭代化开发</li><li>需求管理</li><li>使用基于构件的体系结构</li><li>可视化软件建模</li><li>持续质量验证</li><li>控制软件变更</li></ul><h4 id="软件工程核心概念"><a href="#软件工程核心概念" class="headerlink" title="软件工程核心概念"></a>软件工程核心概念</h4><p>概念和形式模型、抽象层次、分治、复用、折中、一致性和完备性、效率、演化</p><h3 id="代码评审分析与优化"><a href="#代码评审分析与优化" class="headerlink" title="代码评审分析与优化"></a>代码评审分析与优化</h3><h4 id="代码评审的最主要的目的是什么"><a href="#代码评审的最主要的目的是什么" class="headerlink" title="代码评审的最主要的目的是什么"></a>代码评审的最主要的目的是什么</h4><p>是确保代码库一直保持健康的状态，代码评审的所有工具和过程都是为了这个目的而构建 的。代码评审会系统化地检查一遍源代码，并希望检查出开发初期未察觉的一些错误，从而提升代码质量。</p><h4 id="代码评审的最主要的内容是什么"><a href="#代码评审的最主要的内容是什么" class="headerlink" title="代码评审的最主要的内容是什么"></a>代码评审的最主要的内容是什么</h4><ul><li>设计：代码是不是经过精心的设计，并适合我们的系统？</li><li>功能性：代码的行为是否和作者的意图保持一致？代码的行为方式对用户是否正常？</li><li>命名：开发者是不是选择易于理解的名称给变量、类和方法进行命名？</li><li>复杂度：代码能更简单一些吗？在未来，其它开发 者能更容易地理解并使用这些代码吗？</li><li>测试：代码是不是正确的，是不是通过了精心设计 的自动测试？</li><li>文档：开发者是不是更新了相关的文档？</li><li>评论：代码评论是不是足够清晰并有用？</li><li>风格：代码是不是采用了标准的编写风格？</li></ul><h4 id="使用静态代码分析发现潜在bug所使用的主要技术有哪些"><a href="#使用静态代码分析发现潜在bug所使用的主要技术有哪些" class="headerlink" title="使用静态代码分析发现潜在bug所使用的主要技术有哪些"></a>使用静态代码分析发现潜在bug所使用的主要技术有哪些</h4><p>主要技术：缺陷模式匹配、类型推断、模型检查、数据流分析等。</p><p>常用Java静态代码分析工具：Checkstyle，FindBugs，PMD</p><h4 id="性能分析的目的是什么"><a href="#性能分析的目的是什么" class="headerlink" title="性能分析的目的是什么"></a>性能分析的目的是什么</h4><ul><li>性能分析的目的在于：决定程序的哪个部分应该被优化，从而提高程序的速度或者内存使用效率。</li><li>性能分析可以由程序的源代码或是可执行文件进行，一般会使用性能分析工具(profiler) 进行。</li></ul><h3 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h3><h4 id="为什么要进行软件测试，软件测试的基本原则有哪些"><a href="#为什么要进行软件测试，软件测试的基本原则有哪些" class="headerlink" title="为什么要进行软件测试，软件测试的基本原则有哪些"></a>为什么要进行软件测试，软件测试的基本原则有哪些</h4><p>​        一款软件开发出来并不能保证其稳定性与毫无漏洞，这就需要进行软件的测试，找出该软件的缺陷，产品的功能是否符合需求，检查软件有没有bug，决定软件是否具有稳定性。</p><p>​        原则：充分注意测试中的聚集现象，测试中发现的80%的错误，可能由程序的20%功能所造成的。对测试结果要有一个确认过程。制定严格的测试计划，排除测试的随意性。注意回归测试的关联性，往往修改一个错误会引起更多错误。妥善保存一切测试过程文档，测试重现往往要靠测试文档。</p><h4 id="常用的软件测试模型有哪些，分析一下各自的优缺点"><a href="#常用的软件测试模型有哪些，分析一下各自的优缺点" class="headerlink" title="常用的软件测试模型有哪些，分析一下各自的优缺点"></a>常用的软件测试模型有哪些，分析一下各自的优缺点</h4><table><thead><tr><th>模型</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>传统瀑布模型</td><td>强调需求设计的作用；前一阶段完成后只需关注后续阶段；为项目提供按阶段划分的检查点，里程碑清晰。</td><td>线性研发过程难以适应需求的频繁变化；项目周期后段才可看到成果，用户要到末期才能看到开发结果，增加了开发的风险；强制的里程碑，对于开发过程中出现的变化，适应能力较差；文档工作量较大，测试在项目的后期，文档的开发带来很大的工作量。</td></tr><tr><td>V模型</td><td>以“编码”为黄金分割线，将整个过程分为开发和测试，并且开发和测试之间是串行的关系。</td><td>将测试放在整个开发的最后阶段，没有让测试尽早介入开发，没有在需求阶段就进入测试。</td></tr><tr><td>W模型</td><td>测试与开发并行，让测试尽早介入开发环节，使测试尽早发现问题今早解决。</td><td>虽然开发与测试并行了，但是在整个开发阶段，仍然是串行的，上一阶段未完全完成无法进入下一阶段，不支持敏捷模式的开发。</td></tr><tr><td>X模型</td><td>解决交接和频繁集成周期的问题。</td><td></td></tr><tr><td>H模型</td><td>测试是一个完全独立的模型，所以可以和其他的流程交叉地进行，便于尽早执行测试。</td><td></td></tr></tbody></table><h4 id="软件测试过程及其相关活动"><a href="#软件测试过程及其相关活动" class="headerlink" title="软件测试过程及其相关活动"></a>软件测试过程及其相关活动</h4><ul><li>开发者测试：单元测试，集成测试（软件设计文档），确认测试（软件需求文档），系统测试（其他系统元素，用户手册），性能测试（非功能性需求）。</li><li>客户测试：验收测试，安装测试</li><li>用户测试：试用测试</li></ul><h4 id="单元测试，集成测试，确认测试，系统测试，验收测试基本内容"><a href="#单元测试，集成测试，确认测试，系统测试，验收测试基本内容" class="headerlink" title="单元测试，集成测试，确认测试，系统测试，验收测试基本内容"></a>单元测试，集成测试，确认测试，系统测试，验收测试基本内容</h4><ul><li>单元测试：对软件基本组成单元进行的测试，有时也称“组件测试”。单元测试一般由编写该单元代码的开发人员执行，该人员负责设计和运行一系列的测试以确保该单元符合需求。</li><li>集成测试：在单元测试的基础上，将所有模块按照总体设计的要求组装成为子系统或系统进行测试的接口。</li><li>确认测试：检查软件能否按合同要求进行工作，即是否满足软件需求说明书中的确认标准。</li><li>系统测试：将已经集成好的软件系统作为一个元素，与计算机硬件、外设、某些支持软件、数据和人员等其他元素结合在一起，在实际运行环境下进行的一系列测试。</li><li>验收测试：验收测试是以用户为主的测试，一般使用用户环境中的实际数据进行测试。在测试过程中，除了考虑软件的功能和性能外，还应对软件的兼容性、可维护性、错误的恢复功能等进行确认。</li></ul><h4 id="黑盒测试白盒测试的异同"><a href="#黑盒测试白盒测试的异同" class="headerlink" title="黑盒测试白盒测试的异同"></a>黑盒测试白盒测试的异同</h4><table><thead><tr><th>黑盒测试</th><th>白盒测试</th></tr></thead><tbody><tr><td>只利用规格说明标识测试用例</td><td>只利用程序源代码标识测试用例</td></tr><tr><td>如果程序实现了未描述的行为，功能测试无法意识到</td><td>如果已描述的行为未能实现，结构性测试无法意识到</td></tr><tr><td>冗余度大，可能会有漏洞</td><td>具有覆盖率指标</td></tr></tbody></table><h3 id="软件设计与软件架构概论"><a href="#软件设计与软件架构概论" class="headerlink" title="软件设计与软件架构概论"></a>软件设计与软件架构概论</h3><h4 id="什么是软件设计，软件设计在SE中所处哪个位置"><a href="#什么是软件设计，软件设计在SE中所处哪个位置" class="headerlink" title="什么是软件设计，软件设计在SE中所处哪个位置"></a>什么是软件设计，软件设计在SE中所处哪个位置</h4><p>软件设计为问题域的外部可见行为的规约增添实际的计算机系统实现所需的细节，包括关于人机交互、任务管理和数据管理的细节。</p><p>软件需求分析→需求规格说明→软件设计→软件文档→软件编码</p><h4 id="软件设计的主要内容"><a href="#软件设计的主要内容" class="headerlink" title="软件设计的主要内容"></a>软件设计的主要内容</h4><p>架构，人机界面和通讯接口，数据结构，算法。</p><h4 id="微服务架构的基本标准有哪些"><a href="#微服务架构的基本标准有哪些" class="headerlink" title="微服务架构的基本标准有哪些"></a>微服务架构的基本标准有哪些</h4><ul><li>分布式服务组成的系统</li><li>按照业务而不是技术来划分组织</li><li>做有生命的产品而不是仅仅针对项目</li><li>强服务个体和弱通信</li><li>自动化运维</li><li>高度容错性</li><li>快速演化和迭代</li></ul><h4 id="软件架构的核心概念"><a href="#软件架构的核心概念" class="headerlink" title="软件架构的核心概念"></a>软件架构的核心概念</h4><p><img src= "/amumu547426.github.io/img/loading.gif" data-src="https://i.loli.net/2020/07/09/uoKnSWq7MiUY25D.png" alt="image-20200708183129945.png"></p><h4 id="软件架构的核心思想有哪些"><a href="#软件架构的核心思想有哪些" class="headerlink" title="软件架构的核心思想有哪些"></a>软件架构的核心思想有哪些</h4><ul><li>异步：层与层之间通过异步调用提升吞吐量</li><li>分层：各层次职责单一，提升可维护性</li><li>缓存：层与层之间通过缓存提高存取效率</li><li>分布式：各层内通过分布式提升性能</li></ul><h3 id="SaaS-软件即服务-与云端软件部署"><a href="#SaaS-软件即服务-与云端软件部署" class="headerlink" title="SaaS(软件即服务)与云端软件部署"></a>SaaS(软件即服务)与云端软件部署</h3><h4 id="B-S与三层C-S结构的区别"><a href="#B-S与三层C-S结构的区别" class="headerlink" title="B/S与三层C/S结构的区别"></a>B/S与三层C/S结构的区别</h4><ul><li>C/S：表现层仍部署在客户端（表示层，功能层，数据层）</li><li>B/S：客户端除浏览器外无任何程序需要部署（表现层，应用层，数据层）</li></ul><h4 id="C-S-B-S混合模式遵循的原则是什么"><a href="#C-S-B-S混合模式遵循的原则是什么" class="headerlink" title="C/S+B/S混合模式遵循的原则是什么"></a>C/S+B/S混合模式遵循的原则是什么</h4><ul><li>内外有别：企业内部通过局域网直接访问数据库服务器，企业外部通过Internet访问Web服务器</li><li>查改有别原则：不管用户处于企业内外什么位置（局域网或Internet），凡是需要对数据进行更新操作的，都需要使用C/S结构；如果只是执行一般的查询与浏览操作，则使用B/S结构</li></ul><h4 id="Sass软件的基本特征，与传统B-S的本质区别是什么"><a href="#Sass软件的基本特征，与传统B-S的本质区别是什么" class="headerlink" title="Sass软件的基本特征，与传统B/S的本质区别是什么"></a>Sass软件的基本特征，与传统B/S的本质区别是什么</h4><p>本质上属于B/S结构，对B/S的扩展：</p><ul><li>通过web来管理和使用软件</li><li>软件被集中式的部署与管理，统一升级和维护</li><li>单实例，多租户</li></ul><p>本质区别：多租户共享Server和软件实例</p><h4 id="SaaS软件具体划分为哪几个层次，每个层次分别有什么作用"><a href="#SaaS软件具体划分为哪几个层次，每个层次分别有什么作用" class="headerlink" title="SaaS软件具体划分为哪几个层次，每个层次分别有什么作用"></a>SaaS软件具体划分为哪几个层次，每个层次分别有什么作用</h4><ul><li>表示层：接收用户输入的数据与指令，展示数据的处理结果；本身并不维护数据也不包含业务逻辑</li><li>控制层：统一维护一组对象；根据表示层发来的指令调度这些对象的行为；除了调度之外，本身也可能包含业务逻辑；亦可直接访问DB</li><li>逻辑层：对象（数据+业务逻辑）</li><li>持久化层：数据的持久存储</li></ul><h4 id="SaaS软件基本架构是MVC，M、V、C分别有什么作用"><a href="#SaaS软件基本架构是MVC，M、V、C分别有什么作用" class="headerlink" title="SaaS软件基本架构是MVC，M、V、C分别有什么作用"></a>SaaS软件基本架构是MVC，M、V、C分别有什么作用</h4><ul><li>模型M：封装业务逻辑/数据，将数据变化通知视图</li><li>视图V：显示用户界面，将用户行为传递给控制器</li><li>控制器C：将用户行为映射到模型的更新上，选择需要显示的视图</li></ul><h3 id="基本架构风格"><a href="#基本架构风格" class="headerlink" title="基本架构风格"></a>基本架构风格</h3><h4 id="软件架构风格划分为哪几个层次"><a href="#软件架构风格划分为哪几个层次" class="headerlink" title="软件架构风格划分为哪几个层次"></a>软件架构风格划分为哪几个层次</h4><ul><li>代码模式：编码时的套路，一些技巧，是最低层次的套路，只能影响某一方法或类中的一些细节</li><li>设计模式：解决了一般性的设计问题，影响一个模块内部，是中等层次的重用策略</li><li>架构模式：是高层层次的重用策略，实现定义好一些子系统，层，指定他们的责任，并给出把他们组织在一起的法则和指南</li></ul><h4 id="C-S-B-S混合模式遵循的原则"><a href="#C-S-B-S混合模式遵循的原则" class="headerlink" title="C/S+B/S混合模式遵循的原则"></a>C/S+B/S混合模式遵循的原则</h4><p>内外有别原则：</p><ul><li>企业内部用户通过局域网直接访问数据库服务器<ul><li>C/S结构，交互性增强，数据查询与修改响应速度高</li></ul></li><li>企业外部用户通过Internet访问Web服务器/应用服务器<ul><li>B/S结构，用户不直接访问数据，数据安全</li></ul></li></ul><p>查改有别原则：</p><ul><li>不管用户处于企业内外什么位置，凡是需要对数据进行更新操作的都要使用C/S结构</li><li>如果只是执行一般的查询与浏览操作则使用B/S结构</li></ul><h4 id="事件系统的基本构成与实现策略"><a href="#事件系统的基本构成与实现策略" class="headerlink" title="事件系统的基本构成与实现策略"></a>事件系统的基本构成与实现策略</h4><p><img src= "/amumu547426.github.io/img/loading.gif" data-src="https://i.loli.net/2020/07/09/yN5Hu4PMXqaw2BR.png" alt="image-20200709085846109.png"></p><p>分离的交互：事件发布者不会意识到事件订阅者的存在</p><p>多对多通信：采用发布/订阅消息传递，一个特定事件可以影响多个订阅者</p><p>基于事件的触发器：控制流由接收者确定</p><p>异步：通过事件消息传递支持异步操作</p><p>事件风格实现策略：</p><ul><li>选择广播式：有目的广播，只发送给那些已经注册过的订阅者</li><li>观察者模式：发布-订阅模式</li></ul><h3 id="软件需求与需求获取"><a href="#软件需求与需求获取" class="headerlink" title="软件需求与需求获取"></a>软件需求与需求获取</h3><h4 id="软件需求有哪些作用"><a href="#软件需求有哪些作用" class="headerlink" title="软件需求有哪些作用"></a>软件需求有哪些作用</h4><ul><li>充分理解现实中的业务问题，并作为软件设计的基础</li><li>为软件项目的成本、时间、风险估计提供准确的依据</li><li>减少开发工作量，避免将时间与资源浪费在设计与实现错误的需求上</li><li>通过提供需求文档和需求基线，来有效的管理系统演化与变更</li><li>作为顾客与开发团队之间正式合同的一部分</li><li>为最终的验收测试提供标准和依据</li></ul><h4 id="不同层次的软件需求"><a href="#不同层次的软件需求" class="headerlink" title="不同层次的软件需求"></a>不同层次的软件需求</h4><p><img src= "/amumu547426.github.io/img/loading.gif" data-src="https://i.loli.net/2020/07/09/RUnklbGuciYAdMq.png" alt="image-20200709091920149.png"></p><h4 id="产生不合格需求的原因有哪些"><a href="#产生不合格需求的原因有哪些" class="headerlink" title="产生不合格需求的原因有哪些"></a>产生不合格需求的原因有哪些</h4><ul><li>无用户参与</li><li>用户需求不断增加</li><li>模棱两可的需求</li><li>不必要的特性</li><li>过于精简的规格说明</li><li>忽略了用户分类</li><li>不准确的计划</li></ul><h3 id="用户故事与用例建模"><a href="#用户故事与用例建模" class="headerlink" title="用户故事与用例建模"></a>用户故事与用例建模</h3><h4 id="什么事用户故事，由哪些内容构成"><a href="#什么事用户故事，由哪些内容构成" class="headerlink" title="什么事用户故事，由哪些内容构成"></a>什么事用户故事，由哪些内容构成</h4><ul><li>卡片：简要的文本陈述</li><li>交谈：用户如何与系统交互</li><li>确认：如何验证和测试</li></ul><h4 id="好的用户故事应具备的特征"><a href="#好的用户故事应具备的特征" class="headerlink" title="好的用户故事应具备的特征"></a>好的用户故事应具备的特征</h4><ul><li>Independent：尽可能独立</li><li>Negotiable：可讨论的</li><li>Valuable：对用户/客户有价值的，以用户可理解的语言书写，是系统的特性而非开发任务</li><li>Estimable：其工作量可以估计</li><li>Small：小</li><li>Testable：可测试的，可验证的</li></ul><h4 id="面向对象软件开发方法中的用例有哪些特征"><a href="#面向对象软件开发方法中的用例有哪些特征" class="headerlink" title="面向对象软件开发方法中的用例有哪些特征"></a>面向对象软件开发方法中的用例有哪些特征</h4><ul><li>行为序列：一个用例由一组可产生某些特定结果的行为构成，这些行为是不可再分解的</li><li>系统执行：系统为外部角色提供服务</li><li>可观测到的，有价值的结果：用例必须对用户产生价值</li><li>特定的角色：某人，某台设备，某外部系统等，能够触发某些行为</li></ul><h4 id="用例模型的元素构成"><a href="#用例模型的元素构成" class="headerlink" title="用例模型的元素构成"></a>用例模型的元素构成</h4><ul><li>参与者：存在于被定义系统外部并与该系统发生交互的人或其他系统，代表系统的使用者或使用环境</li><li>用例</li><li>通讯关联：用于表示参与者和用例之间的对应关系。表示参与者使用了系统中的那些服务（用例），系统所提供的服务（用例）是被哪些参与者使用的</li></ul><h4 id="用例建模的基本过程"><a href="#用例建模的基本过程" class="headerlink" title="用例建模的基本过程"></a>用例建模的基本过程</h4><ul><li>识别并描述参与者</li><li>识别用例，给出简要描述</li><li>识别参与者与角色之间的通讯关联</li><li>给出每一个用例的详细描述</li><li>细化用例模型</li></ul><h3 id="面向对象基本概念"><a href="#面向对象基本概念" class="headerlink" title="面向对象基本概念"></a>面向对象基本概念</h3><h4 id="面向对象的软件工程"><a href="#面向对象的软件工程" class="headerlink" title="面向对象的软件工程"></a>面向对象的软件工程</h4><ul><li>面向对象分析OOA：分析和理解问题域，找出描述问题域和系统责任所需的类及对象，分析它们的内部构成和外部关系，建立OOA 模型</li><li>面向对象设计OOD：将OOA 模型直接变成OOD模型，并且补充与一些实现有关的部分，如人机界面、数据存储、任务管理等</li><li>面向对象编程OOP：用一种面向对象的编程语言将OOD模型中的各个成分编写成程序，由于从OOA→OOD→OOP实现了无缝连接和平滑过渡，因此提高了开发工作的效率和质量</li></ul><h4 id="面向对象基本概念-1"><a href="#面向对象基本概念-1" class="headerlink" title="面向对象基本概念"></a>面向对象基本概念</h4><ul><li>对象<ul><li>对象Object：用来描述客观事物的实体，是构成系统的一个基本单位，由一组属性以及作用在这组属性的操作构成</li><li>属性Attribute：描述对象静态特性的数据项</li><li>操作Operation：描述对象动态性的一个动作</li></ul></li><li>类：具有相同属性和操作的一组对象的集合，它为属于该类的全部对象提供了统一的抽象描述</li><li>消息：一个对象向其他对象发出的请求，一般包含提供服务的对象标识、服务标识、输入信息和应答信息等信息</li><li>封装：把对象的属性和操作结合成一个独立的单元，并尽可能对外界隐藏对象内部实现细节</li><li>接口：描述了一个类的一组外部可用的属性和服务（操作）集</li><li>继承：之类可以自动拥有父类的全部属性和操作<ul><li>单一继承</li><li>多重继承</li><li>抽象类：把一些类组织起来，提供一些公共的行为，但不能使用这个类的实例(即从该类中派生出具体的对象)，而仅仅使用其子类的实例。称不能建立实例的类为抽象类</li></ul></li><li>多态：在父类中定义的属性或服务被子类继承后，可以具有不同的数据类型或表现出不同的行为。同一操作用于不同对象上可以有不同的解释，并产生不同的执行结果</li></ul><h4 id="对象之间的关系"><a href="#对象之间的关系" class="headerlink" title="对象之间的关系"></a>对象之间的关系</h4><ul><li>分类结构：继承/泛化：一般与特殊的关系</li><li>组成结构：<ul><li>组合：部分与整体的关系，彼此不可分</li><li>聚合：部分与整体的关系，但彼此可分</li></ul></li><li>实例连接：关联：对象之间的长期静态联系</li><li>消息连接：依赖：对象之间动态的，临时的通信联系</li></ul><p>强度：继承&gt;&gt;组合&gt;&gt;聚合&gt;&gt;关联&gt;&gt;依赖</p><ul><li>接口连接：实现关系：是泛化关系和依赖关系的结合，通常用以描述一个接口和实现它们的类之间的关系</li></ul><h3 id="面向对象分析与设计"><a href="#面向对象分析与设计" class="headerlink" title="面向对象分析与设计"></a>面向对象分析与设计</h3><h4 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h4><ul><li>包图：逻辑设计</li><li>部署图：物理设计</li></ul><h4 id="对象设计"><a href="#对象设计" class="headerlink" title="对象设计"></a>对象设计</h4><ul><li>类图</li><li>状态图</li><li>时序图</li><li>关系数据库设计方案</li><li>用户界面设计方案</li></ul><h3 id="面向NFR（非功能性需求）的软件架构设计"><a href="#面向NFR（非功能性需求）的软件架构设计" class="headerlink" title="面向NFR（非功能性需求）的软件架构设计"></a>面向NFR（非功能性需求）的软件架构设计</h3><h4 id="面向对象五大设计原则"><a href="#面向对象五大设计原则" class="headerlink" title="面向对象五大设计原则"></a>面向对象五大设计原则</h4><ul><li>单一责任原则SRP：一个类一个责任，不应有多于一个的原因使得一个类发生变化</li><li>开放封闭原则OCP：对扩展性的开放，对修改的封闭</li><li>Liskov替换原则LSP：子类型必须能够替换其基类型</li><li>接口隔离原则ISP：客户端不应依赖于它们不需要的方法，客户端应依赖稳定的接口</li><li>依赖倒置原则DIP：抽象模块不依赖于具体模块，具体应依赖于抽象</li></ul><p>抽象：LSP，DIP，OCP</p><p>分离：SRP，ISP</p><h4 id="模块化设计原则"><a href="#模块化设计原则" class="headerlink" title="模块化设计原则"></a>模块化设计原则</h4><p>模块化设计目标：高内聚，低耦合</p><p>模块内部聚合度：某一模块内部包含的各功能之间相互关联的紧密程度</p><p>模块之间耦合度：多个模块之间相互关联的紧密程度</p><p>耦合是影响软件复杂程度和设计质量的重要因素，应建立模块间耦合度尽可能松散的系统</p><h4 id="软件架构基本模式"><a href="#软件架构基本模式" class="headerlink" title="软件架构基本模式"></a>软件架构基本模式</h4><ul><li>分层：C/S、B/S、多层，数据、计算与显示的分离（MVC）<ul><li>各负其责，分工明确</li><li>牺牲了效率，提高了可维护性</li></ul></li><li>异步：事件，消息<ul><li>请求之后继续执行，后续等待结果</li><li>性能（吞吐量）提高，但是实时性变差</li></ul></li><li>缓存：页面缓存、数据缓存、消息缓存<ul><li>预取</li><li>提高了效率，牺牲了准确性</li></ul></li><li>并发（分布式）：集群、负载均衡、分布式数据库<ul><li>多个模块共同处理请求</li><li>提高了吞吐量，可靠性，降低了响应时间，但需考虑同步等复杂问题</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>敏捷开发过程</title>
      <link href="/amumu547426.github.io/2020/07/03/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B/"/>
      <url>/amumu547426.github.io/2020/07/03/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\amumu547426.github.io\assets\css\APlayer.min.css"><script src="\amumu547426.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\amumu547426.github.io\assets\js\Meting.min.js"></script><h1 id="敏捷开发过程"><a href="#敏捷开发过程" class="headerlink" title="敏捷开发过程"></a>敏捷开发过程</h1><h2 id="敏捷过程模型"><a href="#敏捷过程模型" class="headerlink" title="敏捷过程模型"></a>敏捷过程模型</h2><p>以人为核心、迭代、循序渐进的增量开发方法<br>小步快跑，及时反馈，以快速的增量和迭代方式进行软件开发</p><h3 id="核心–迭代开发"><a href="#核心–迭代开发" class="headerlink" title="核心–迭代开发"></a>核心–迭代开发</h3><ul><li>每一次迭代都建立在稳定质量的基础上，并作为下一轮迭代的基线，整个系统功能随着迭代稳定增长不断完善</li><li>每次迭代邀请用户代表（外部或内部）验收，提供需求是否满足的反馈</li><li>迭代推荐采用固定的周期（一般2-4周），迭代内工作不能完成，应当缩减交付范围而不是延长周期</li></ul><h3 id="快速反馈"><a href="#快速反馈" class="headerlink" title="快速反馈"></a>快速反馈</h3><ul><li>将项目分成若干个迭代周期，每个迭代周期结束都能立即反馈</li><li>通过不断的沟通，还能减少理解上的偏差，配合反馈，减少误解，从而降低修正错误的代价</li><li>每个迭代周期的结束都能接受验证，从而能快速的适应变化，及时的适应新的需求，保证产品的正确性</li><li>适应变化，利用多层次反馈不断调整以逼近目标</li></ul><h3 id="快速交付"><a href="#快速交付" class="headerlink" title="快速交付"></a>快速交付</h3><ul><li>在需求响应周期相同的情况下，批量（一次开发的需求量）越小，资源利用率更高</li><li>在资源利用率相同的情况下，批量越小，交付周期更短</li><li>减少批量不仅能缩短交付周期，而且还能提高质量，促进创新、降低管理成本、效率更高</li></ul><h2 id="极限编程XP"><a href="#极限编程XP" class="headerlink" title="极限编程XP"></a>极限编程XP</h2><ul><li>XP是一种近螺旋式的开发方法，它将复杂的开发过 程分解为一个个相对比较简单的小周期；通过积极地交流、反馈以及其它一系列的方法，开发人员和客户可以非常清楚地发现进度、变化、待解决的问题和潜在的困难等，并根据实际情况及时地调整开 发过程</li><li>极限编程是一个轻量级的、灵巧的软件开发方法</li><li>极限编程和传统方法学的本质不同在于它更强调可 适应性而不是可预测性</li><li>降低因需求变更而带来的成本</li></ul><h3 id="核心价值"><a href="#核心价值" class="headerlink" title="核心价值"></a>核心价值</h3><ul><li>沟通、简单、反馈、勇气、尊重</li></ul><h3 id="核心实践方法"><a href="#核心实践方法" class="headerlink" title="核心实践方法"></a>核心实践方法</h3><ul><li><p>计划阶段</p><ul><li>倾听用户陈述，形成用户故事，描述其输出、特性、功能等</li><li>按照价值或风险排序，为用户故事指定优先级</li><li>XP团队评估用户故事，为其指定成本</li><li>将若干用户故事指定为下一次发布的增量，确定发布日期</li><li>规划整体进度</li><li>用户可以在开发过程中扩展形式，去除原故事，改变优先级，拆分等</li></ul></li><li><p>设计阶段</p><ul><li><p>遵循KIS原则（Keep It Simple）</p></li><li><p>设计模型：面向对象方法，CRC卡片</p></li><li><p>遇到困难，创建原型</p></li><li><p>对设计方案不断重构</p><ul><li>遵循用户故事的外特性要求</li><li>改善内部结构</li><li>消除bug</li><li>提高效率</li><li>提高易读性</li></ul></li></ul></li><li><p>编码与测试阶段</p><ul><li><p>Coding</p><ul><li>根据用户故事设计单元测试用例</li><li>结对编程，实时讨论，实时评审</li><li>测试驱动的开发，先写测试用例，再写代码</li></ul></li><li><p>Testing</p><ul><li>自动化单元测试</li><li>持续集成</li><li>持续进行回归测试</li><li>验收测试</li></ul></li></ul></li></ul><h2 id="Scrum"><a href="#Scrum" class="headerlink" title="Scrum"></a>Scrum</h2><ul><li>整个开发过程由若干个短的迭代周期组成，一个短的迭代周期称 为一个Sprint（冲刺），每个Sprint的建议长度是2到4周</li><li>使用产品Backlog（任务列表或清单）来管理需求，是一个按照 商业价值排序的需求列表，列表条目的体现形式通常为用户故事</li><li>总是先开发对客户具有较高价值的需求</li><li>在Sprint中，Scrum团队从产品Backlog中挑选最高优先级的需求 进行开发。挑选的需求在Sprint计划会议上经过讨论、分析和估算得到相应的任务列表(backlog)</li><li>在每个迭代结束时，Scrum团队提交潜在可交付的产品增量</li></ul><h3 id="四个重要阶段"><a href="#四个重要阶段" class="headerlink" title="四个重要阶段"></a>四个重要阶段</h3><ul><li>找出完成产品需要做的事情</li><li>决定当前冲刺需要解决的事情</li><li>冲刺</li><li>每日站会</li></ul><h3 id="三个角色"><a href="#三个角色" class="headerlink" title="三个角色"></a>三个角色</h3><ul><li>产品负责人Product Owner</li><li>项目管理者Scrum Master</li><li>Scrum团队</li></ul><h3 id="三个工作"><a href="#三个工作" class="headerlink" title="三个工作"></a>三个工作</h3><ul><li><p>产品列表Product Backlog</p><ul><li>根据用户价值进行优先级排序的高层需求</li></ul></li><li><p>冲刺列表Sprint Backlog</p><ul><li>要在冲刺中完成的任务清单</li></ul></li><li><p>产品增量Increment</p><ul><li>最终交付给客户的内容</li></ul></li></ul><h3 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h3><ul><li><p>sprint</p><ul><li>冲刺，代表一个2-4周的迭代</li></ul></li><li><p>产品待办列表梳理会</p></li><li><p>sprint计划会议</p><ul><li>决定sprint中完成那些工作，如何完成</li></ul></li><li><p>每日站会</p></li><li><p>sprint评审会</p><ul><li>在冲刺结束前给产品负责人演示并接受评价的会议</li></ul></li><li><p>sprint回顾会</p><ul><li>冲刺结束后召开的关于自我持续改进的会议</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件过程模型</title>
      <link href="/amumu547426.github.io/2020/07/03/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
      <url>/amumu547426.github.io/2020/07/03/%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\amumu547426.github.io\assets\css\APlayer.min.css"><script src="\amumu547426.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\amumu547426.github.io\assets\js\Meting.min.js"></script><h2 id="软件过程模型"><a href="#软件过程模型" class="headerlink" title="软件过程模型"></a>软件过程模型</h2><p>是指软件生命周期 所涉及的一系列相关过程，由关于软件项目的阶段、状态、 方法、技术和开发、维护软件的人员以及相关Artifacts（计划、 文档、模型、编码、测试、手册等）组成。是软件整个生命 周期中从需求获取，需求分析，设计，实现，测试，发布和 维护一个过程模型。软件过程不仅涉及工程开发，而且还涉及工程支持和工程管理。</p><h3 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h3><p>上一阶段结束，下个阶段才能开始</p><p>每个阶段均有里程碑和提交物</p><p>上一阶段输出时是下一阶段的输入</p><p>每个阶段均需V&amp;V(验证和确认)</p><p>侧重文档与产出物</p><h4 id="适用场合"><a href="#适用场合" class="headerlink" title="适用场合"></a>适用场合</h4><ul><li>软件项目较小，各模块间接口定义非常清晰</li><li>需求在项目开始之前已经被全面了解，产品定义非常稳定</li><li>需求在开发中不太可能发生大的改变</li><li>使用的技术非常成熟，团队成员很熟悉这些技术</li><li>负责各个步骤的子团队位于不同位置，难以做到频繁交流</li><li>外部环境不可控因素少</li></ul><h3 id="增量过程模型"><a href="#增量过程模型" class="headerlink" title="增量过程模型"></a>增量过程模型</h3><h4 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h4><ul><li>采用随着日程时间的进展而交错的线性序列，每个线性序列产生软件的一个可发布的增量</li><li>软件被作为一系列的增量来设计、实现、集成的测试</li></ul><h4 id="快速应用开发RAD"><a href="#快速应用开发RAD" class="headerlink" title="快速应用开发RAD"></a>快速应用开发RAD</h4><ul><li>侧重于短开发周期的增量过程模型，通过基于构件的构建方法实现快速开发</li><li>多个团队并行开发，先启动的团队提交物作为后启动团队的输入</li></ul><h3 id="演化过程模型"><a href="#演化过程模型" class="headerlink" title="演化过程模型"></a>演化过程模型</h3><p>循环、反复、不断调整当前系统以适应需求变化。<br>需求得变更频繁，需求要在非常短的时间内实现，以充分满足用户需求，投入市场</p><h4 id="快速原型法"><a href="#快速原型法" class="headerlink" title="快速原型法"></a>快速原型法</h4><ul><li>双方通过沟通，明确已知需求，并大致勾画出以后再进一步定义的东西</li><li>迅速策划一个原型开发迭代并进行建模</li><li>快速设计产生原型，对原型进行部署，由客户和用户进行评价</li><li>原型系统不断调整以逼近用户需求</li></ul><h4 id="螺旋式过程模型"><a href="#螺旋式过程模型" class="headerlink" title="螺旋式过程模型"></a>螺旋式过程模型</h4><ul><li>制定计划</li><li>风险分析</li><li>实施工程</li><li>客户评估</li></ul><h3 id="形式化过程模型"><a href="#形式化过程模型" class="headerlink" title="形式化过程模型"></a>形式化过程模型</h3><p>使用严格的数学形式来刻画每一阶段的产物（需求、设计、程序、测试）</p><p>应用一系列形式化方法在各阶段产物之间进行自动/半自动的转换</p><h3 id="面向复用的软件过程"><a href="#面向复用的软件过程" class="headerlink" title="面向复用的软件过程"></a>面向复用的软件过程</h3><p>主要思想是复用</p><p>针对一个新的软件系统，不是从一无所有开始入手，而是通过使用已有软件单元来构造系统</p><h4 id="主要过程"><a href="#主要过程" class="headerlink" title="主要过程"></a>主要过程</h4><ul><li>需求分析</li><li>体系结构设计</li><li>构件获取</li><li>构件修改与测试</li><li>构件组装</li><li>集成测试</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理实验-语法分析器-java</title>
      <link href="/amumu547426.github.io/2020/06/28/slrParser/"/>
      <url>/amumu547426.github.io/2020/06/28/slrParser/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\amumu547426.github.io\assets\css\APlayer.min.css"><script src="\amumu547426.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\amumu547426.github.io\assets\js\Meting.min.js"></script><h2 id="语法分析器"><a href="#语法分析器" class="headerlink" title="语法分析器"></a>语法分析器</h2><h3 id="数据结构定义"><a href="#数据结构定义" class="headerlink" title="数据结构定义"></a>数据结构定义</h3><h4 id="单词和单词token表"><a href="#单词和单词token表" class="headerlink" title="单词和单词token表"></a>单词和单词token表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> compiler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jpf</span></span><br><span class="line"><span class="comment"> * 词法分析结果</span></span><br><span class="line"><span class="comment"> * value 文法符号名</span></span><br><span class="line"><span class="comment"> * type 符号类型</span></span><br><span class="line"><span class="comment"> * typeCOde 种别码</span></span><br><span class="line"><span class="comment"> * addr 符号表中所在位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Word</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String typeCode;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> addr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Word</span><span class="params">(String value, String typeCode, String type, <span class="keyword">int</span> addr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.typeCode = typeCode;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.addr = addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Word&gt; token = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTypeCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> typeCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTypeCode</span><span class="params">(String typeCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.typeCode = typeCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAddr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddr</span><span class="params">(<span class="keyword">int</span> addr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.addr = addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printToken</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&#123;"</span>+<span class="keyword">this</span>.value+<span class="string">","</span>+<span class="keyword">this</span>.type+<span class="string">","</span>+<span class="keyword">this</span>.typeCode+<span class="string">","</span>+<span class="keyword">this</span>.addr+<span class="string">"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="符号和符号表"><a href="#符号和符号表" class="headerlink" title="符号和符号表"></a>符号和符号表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> compiler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: jpf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/6/12 0012 15:25</span></span><br><span class="line"><span class="comment"> * 符号表</span></span><br><span class="line"><span class="comment"> * name 变量名 如id的值，digit的值</span></span><br><span class="line"><span class="comment"> * type 变量类型</span></span><br><span class="line"><span class="comment"> * val 变量值，暂为null</span></span><br><span class="line"><span class="comment"> * addr 相对地址</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Symbol</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> addr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> offset;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Symbol&gt; symbolsTable = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Symbol</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.index = symbolsTable.size();</span><br><span class="line">        <span class="keyword">this</span>.val = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**获取单词在符号表中的位置 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">wordLocate</span><span class="params">(String word)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;symbolsTable.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(symbolsTable.get(i).name.equals(word))&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**新建一个临时变量，返回其位置*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">newTemp</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        symbolsTable.add(<span class="keyword">new</span> Symbol(<span class="string">"&amp;"</span>+temp));</span><br><span class="line">        symbolsTable.get(symbolsTable.size()-<span class="number">1</span>).type = type;</span><br><span class="line">        symbolsTable.get(symbolsTable.size()-<span class="number">1</span>).addr = offset;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"Integer"</span>.equals(type))&#123;</span><br><span class="line">            offset += <span class="number">4</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"Float"</span>.equals(type))&#123;</span><br><span class="line">            offset += <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp++;</span><br><span class="line">        <span class="keyword">return</span> symbolsTable.size()-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**类型判断，即只能Integer给Integer和Float赋值，而不能反过来*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">typeCheck</span><span class="params">(<span class="keyword">int</span> addr1, <span class="keyword">int</span> addr2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbolsTable.get(addr1).type.equals(symbolsTable.get(addr2).type) || <span class="string">"Float"</span>.equals(symbolsTable.get(addr1).type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printSt</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Symbol x : symbolsTable)&#123;</span><br><span class="line">            String mes = String.format(<span class="string">"%2d %5s  %s  %3s"</span>,x.index,x.name,x.type,x.addr);</span><br><span class="line">            System.out.printf(<span class="string">"%s\n"</span>,mes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVal</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAddr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddr</span><span class="params">(<span class="keyword">int</span> addr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.addr = addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="产生式右部"><a href="#产生式右部" class="headerlink" title="产生式右部"></a>产生式右部</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> compiler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: jpf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/6/17 0017 9:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rproduct</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产生式右部数据结构，pointer指明了下一个待移入文法符号</span></span><br><span class="line"><span class="comment">     * len表示有多少个文法符号</span></span><br><span class="line"><span class="comment">     * no表明该产生式编号</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> String[] symbol;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> pointer;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> no;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rproduct</span><span class="params">(String[] symbol, <span class="keyword">int</span> pointer, <span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.symbol = symbol;</span><br><span class="line">        <span class="keyword">this</span>.pointer = pointer;</span><br><span class="line">        <span class="keyword">this</span>.len = symbol.length;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**将symbol第i个位置之后的字符串数组返回*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">divideR</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(i&lt;len)&#123;</span><br><span class="line">            ret.addAll(Arrays.asList(symbol).subList(i, len));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**返回指针指向的符号，即待移进符号*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNext</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pointer &lt; len)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.symbol[pointer];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**输出产生式右部*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">printProduct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String ret = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">            ret += symbol[i]+<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**重写equals方法，symbol和pointer相同即认为相等*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span> || <span class="keyword">this</span>.getClass()!=obj.getClass())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Rproduct rproduct = (Rproduct) obj;</span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(<span class="keyword">this</span>.symbol, rproduct.symbol) &amp;&amp; <span class="keyword">this</span>.pointer == rproduct.pointer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="增广文法，规范项集族，SLR分析表，终结符集合，非终结符集合"><a href="#增广文法，规范项集族，SLR分析表，终结符集合，非终结符集合" class="headerlink" title="增广文法，规范项集族，SLR分析表，终结符集合，非终结符集合"></a>增广文法，规范项集族，SLR分析表，终结符集合，非终结符集合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**M N X Y为附加状态*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] vt = &#123;<span class="string">"id"</span>,<span class="string">"Integer"</span>,<span class="string">"Float"</span>,<span class="string">"int"</span>,<span class="string">"float"</span>,<span class="string">"if"</span>,<span class="string">"("</span>,<span class="string">")"</span>,<span class="string">"else"</span>,<span class="string">"while"</span>,<span class="string">"&gt;"</span>,<span class="string">"&lt;"</span>,<span class="string">"=="</span>,<span class="string">"="</span>,<span class="string">"+"</span>,<span class="string">"-"</span>,<span class="string">"*"</span>,<span class="string">"/"</span>,<span class="string">";"</span>,<span class="string">"$"</span>&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] vn = &#123;<span class="string">"G"</span>,<span class="string">"P"</span>,<span class="string">"D"</span>,<span class="string">"S"</span>,<span class="string">"L"</span>,<span class="string">"C"</span>,<span class="string">"E"</span>,<span class="string">"T"</span>,<span class="string">"F"</span>,<span class="string">"M"</span>,<span class="string">"N"</span>,<span class="string">"X"</span>,<span class="string">"Y"</span>&#125;;</span><br><span class="line"><span class="comment">/**G的增广文法*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; GPLUS = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">/**项集规范族*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Integer,HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt;&gt; C = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">/**slr分析表*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;HashMap&lt;Integer,String&gt;, String&gt; ACTION = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;HashMap&lt;Integer,String&gt;, Integer&gt; GOTO = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">/**归约情况,即用那些产生式归约*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;String&gt; reduce = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="静态初始化增广文法"><a href="#静态初始化增广文法" class="headerlink" title="静态初始化增广文法"></a>静态初始化增广文法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    GPLUS.put(<span class="string">"G"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"P"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    GPLUS.put(<span class="string">"P"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"M"</span>,<span class="string">"D"</span>,<span class="string">"S"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    GPLUS.put(<span class="string">"D"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"L"</span>,<span class="string">"id"</span>,<span class="string">";"</span>,<span class="string">"N"</span>,<span class="string">"D"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"epsilon"</span>&#125;,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    GPLUS.put(<span class="string">"L"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"int"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"float"</span>&#125;,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    <span class="comment">/*---语义分析额外加入产生式*/</span></span><br><span class="line">    GPLUS.put(<span class="string">"M"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"epsilon"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    GPLUS.put(<span class="string">"N"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"epsilon"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    <span class="comment">/*-----------------------*/</span></span><br><span class="line">    GPLUS.put(<span class="string">"S"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"id"</span>,<span class="string">"="</span>,<span class="string">"E"</span>,<span class="string">";"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"if"</span>,<span class="string">"("</span>,<span class="string">"C"</span>,<span class="string">")"</span>,<span class="string">"X"</span>,<span class="string">"S"</span>&#125;,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"if"</span>,<span class="string">"("</span>,<span class="string">"C"</span>,<span class="string">")"</span>,<span class="string">"X"</span>,<span class="string">"S"</span>,<span class="string">"Y"</span>,<span class="string">"else"</span>,<span class="string">"X"</span>,<span class="string">"S"</span>&#125;,<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"while"</span>,<span class="string">"X"</span>,<span class="string">"("</span>,<span class="string">"C"</span>,<span class="string">")"</span>,<span class="string">"X"</span>,<span class="string">"S"</span>&#125;,<span class="number">0</span>,<span class="number">3</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"S"</span>,<span class="string">"X"</span>,<span class="string">"S"</span>&#125;,<span class="number">0</span>,<span class="number">4</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    <span class="comment">/*---语义分析额外加入产生式*/</span></span><br><span class="line">    GPLUS.put(<span class="string">"X"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"epsilon"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    GPLUS.put(<span class="string">"Y"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"epsilon"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    <span class="comment">/*-----------------------*/</span></span><br><span class="line">    GPLUS.put(<span class="string">"C"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"E"</span>,<span class="string">"&gt;"</span>,<span class="string">"E"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"E"</span>,<span class="string">"&lt;"</span>,<span class="string">"E"</span>&#125;,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"E"</span>,<span class="string">"=="</span>,<span class="string">"E"</span>&#125;,<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    GPLUS.put(<span class="string">"E"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"E"</span>,<span class="string">"+"</span>,<span class="string">"T"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"E"</span>,<span class="string">"-"</span>,<span class="string">"T"</span>&#125;,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"T"</span>&#125;,<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    GPLUS.put(<span class="string">"T"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"F"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"T"</span>,<span class="string">"*"</span>,<span class="string">"F"</span>&#125;,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"T"</span>,<span class="string">"/"</span>,<span class="string">"F"</span>&#125;,<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    GPLUS.put(<span class="string">"F"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"("</span>,<span class="string">"E"</span>,<span class="string">")"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"id"</span>&#125;,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"Integer"</span>&#125;,<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"Float"</span>&#125;,<span class="number">0</span>,<span class="number">3</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文法"><a href="#文法" class="headerlink" title="文法"></a>文法</h4><p>G → P</p><p>P → D S</p><p>D →L id ; D |ε</p><p>L → int | float</p><p>S → id = E;      </p><p>S → if (C)  S1  </p><p>S → if (C)  S1  else  S2</p><p>S → while(C)  S1 </p><p>S → S  S</p><p>C → E1 &gt; E2</p><p>C → E1 &lt; E2          </p><p>C → E1 == E2         </p><p>E → E1 + T      </p><p>E → E1 – T   </p><p>E → T             </p><p>T → F             </p><p>T → T1 * F          </p><p>T → T1 / F          </p><p>F → ( E )          </p><p>F → id           </p><p>F → Integer</p><p>F → Float</p><p>注：由于语义翻译部分需要对文法就行修改，故代码中初始化文法为修改后的文法，加入了几个空产生式。epsilon表示空。</p><h3 id="SLR分析器的实现"><a href="#SLR分析器的实现" class="headerlink" title="SLR分析器的实现"></a>SLR分析器的实现</h3><h4 id="判断一组产生式是否包含在在状态集的某个状态中，返回状态值"><a href="#判断一组产生式是否包含在在状态集的某个状态中，返回状态值" class="headerlink" title="判断一组产生式是否包含在在状态集的某个状态中，返回状态值"></a>判断一组产生式是否包含在在状态集的某个状态中，返回状态值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">isinC</span><span class="params">(HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; item)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Map.Entry&lt;Integer,HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt;&gt; entry : C.entrySet())&#123;</span><br><span class="line">        <span class="keyword">int</span> key = entry.getKey();</span><br><span class="line">        HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; value = entry.getValue();</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String, ArrayList&lt;Rproduct&gt;&gt; entry2 : item.entrySet())&#123;</span><br><span class="line">            String key2 = entry2.getKey();</span><br><span class="line">            ArrayList&lt;Rproduct&gt; value2 = entry2.getValue();</span><br><span class="line">            <span class="keyword">if</span>(value.containsKey(key2))&#123;</span><br><span class="line">                <span class="keyword">if</span>(!value.get(key2).containsAll(value2))&#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断一组产生式是否在状态集的某个状态中，若在，返回状态值，否则返回-1。该函数在生成状态集时使用，作用是对于一个状态集的每一个产生式，在接收任何一个文法符号后得到的项目集闭包是否在已生成的状态集中，若在则不必新建状态，若不在则需要新加一个状态。</p><h4 id="求文法符号的first集"><a href="#求文法符号的first集" class="headerlink" title="求文法符号的first集"></a>求文法符号的first集</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HashSet&lt;String&gt; <span class="title">first</span><span class="params">(String x)</span></span>&#123;</span><br><span class="line">    HashSet&lt;String&gt; ret = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(!Arrays.asList(vn).contains(x))&#123;</span><br><span class="line">        ret.add(x);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(GPLUS.containsKey(x))&#123;</span><br><span class="line">        ArrayList&lt;Rproduct&gt; value = GPLUS.get(x);</span><br><span class="line">        <span class="keyword">if</span>(value.contains(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"epsilon"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>)))&#123;</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Rproduct rproduct : value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!rproduct.symbol[<span class="number">0</span>].equals(x))&#123;</span><br><span class="line">                <span class="keyword">if</span>(Arrays.asList(vn).contains(rproduct.symbol[<span class="number">0</span>]))&#123;</span><br><span class="line">                    stack.push(rproduct.symbol[<span class="number">0</span>]);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    ret.add(rproduct.symbol[<span class="number">0</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag &amp;&amp; rproduct.len&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                stack.push(rproduct.symbol[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stack.empty())&#123;</span><br><span class="line">            String firstVn = stack.pop();</span><br><span class="line">            ret.addAll(first(firstVn));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求文法符号x的first集，这里的x是单个文法符号，而不是符号串，思路为若x是终结符，则在返回的集合中加入该终结符并返回。否则对所有以该非终结符为左部的产生式，若产生式中包含直接推出epsilon产生式，则将flag设为true，然后遍历这些产生式右部的第一个文法符号，若是x本身，flag为true且该产生式右部文法符号数大于1，则将x的后一个文法符号压入堆栈；若不是x本身，若是非终结符号，则压入堆栈，若是终结符号，则加入返回集合。遍历结束后查看堆栈，当堆栈不为空的时候，依次将这些非终结符号弹出堆栈并将将这些非终结符号的first集加入返回集合，利用递归实现。</p><h4 id="求文法符号串first集"><a href="#求文法符号串first集" class="headerlink" title="求文法符号串first集"></a>求文法符号串first集</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HashSet&lt;String&gt; <span class="title">firstX</span><span class="params">(ArrayList&lt;String&gt; x)</span></span>&#123;</span><br><span class="line">    HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String s : x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first(s).contains(<span class="string">"epsilon"</span>)) &#123;</span><br><span class="line">            set.addAll(first(s));</span><br><span class="line">            set.remove(<span class="string">"epsilon"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            set.addAll(first(s));</span><br><span class="line">            <span class="keyword">return</span> set;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    set.add(<span class="string">"epsilon"</span>);</span><br><span class="line">    <span class="keyword">return</span>  set;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求文法符号串的first集。该算法比较简单，遍历符号串，将第一个文法符号的first集加入到firstX，若第一个文法符号的first集包含epsilon，则加入第二个文法符号的first集，若第二个能推出空，则加入第三个……以此类推。</p><h4 id="求非终结符的follow集"><a href="#求非终结符的follow集" class="headerlink" title="求非终结符的follow集"></a>求非终结符的follow集</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HashSet&lt;String&gt; <span class="title">follow</span><span class="params">(String x)</span> </span>&#123;</span><br><span class="line">    HashSet&lt;String&gt; ret = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"G"</span>.equals(x)) &#123;</span><br><span class="line">        ret.add(<span class="string">"$"</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, ArrayList&lt;Rproduct&gt;&gt; entry : GPLUS.entrySet()) &#123;</span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            <span class="keyword">for</span> (Rproduct rproduct : entry.getValue()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; rproduct.len; index++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (rproduct.symbol[index].equals(x)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (index &lt; rproduct.len - <span class="number">1</span>) &#123;</span><br><span class="line">                            String next = rproduct.symbol[index + <span class="number">1</span>];</span><br><span class="line">                            <span class="keyword">if</span> (Arrays.asList(vt).contains(next)) &#123;</span><br><span class="line">                                ret.add(next);</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Arrays.asList(vn).contains(next)) &#123;</span><br><span class="line">                                HashSet&lt;String&gt; set = firstX(rproduct.divideR(index + <span class="number">1</span>));</span><br><span class="line">                                <span class="keyword">if</span> (set.contains(<span class="string">"epsilon"</span>)) &#123;</span><br><span class="line">                                    set.remove(<span class="string">"epsilon"</span>);</span><br><span class="line">                                    ret.addAll(set);</span><br><span class="line">                                    stack.add(key);</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    ret.addAll(set);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == rproduct.len - <span class="number">1</span>) &#123;</span><br><span class="line">                            stack.push(key);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stack.empty())&#123;</span><br><span class="line">            String left = stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(!left.equals(x))&#123;</span><br><span class="line">                ret.addAll(follow(left));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求非终结符号的follow集，若是开始符号G，则将”$”加入集合并返回。否则遍历所有产生式，对每个产生式的右部，依次遍历各个文法符号，当找到与x相等的文法符号，取该符号的后继符号，若后继符号为终结符，则将终结符加入x的follow集，否则若是非终结符，则将产生式中该非终结符及其之后的文法符号构成的符号串的first集元素加入到x的follow集，若该非终结符能推出epsilon，则还要将该非终结符压入堆栈。待遍历完成后，对堆栈中的非终结符，依次出栈并递归的将其follow集加入到x的follow集。</p><h4 id="求项集闭包"><a href="#求项集闭包" class="headerlink" title="求项集闭包"></a>求项集闭包</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; getClosure(HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; item)&#123;</span><br><span class="line">    HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; rproducts = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">        String x;</span><br><span class="line">        <span class="comment">/*遍历item，对item中每个产生式右部待移入的文法符号，GPLUS有以其为左部的产生式，若不在item中，则加入*/</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, ArrayList&lt;Rproduct&gt;&gt; entry : item.entrySet()) &#123;</span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            ArrayList&lt;Rproduct&gt; value = entry.getValue();</span><br><span class="line">            <span class="keyword">for</span> (Rproduct rproduct : value) &#123;</span><br><span class="line">                x = rproduct.getNext();</span><br><span class="line">                <span class="keyword">if</span> (GPLUS.containsKey(x)) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; GPLUS.get(x).size(); i++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(!item.containsKey(x) &amp;&amp; !rproducts.containsKey(x))&#123;</span><br><span class="line">                            rproducts.put(x, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (!item.containsKey(x)) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(!rproducts.get(x).contains(GPLUS.get(x).get(i)))&#123;</span><br><span class="line">                                rproducts.get(x).add(GPLUS.get(x).get(i));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!item.get(x).contains(GPLUS.get(x).get(i))) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(!rproducts.containsKey(x))&#123;</span><br><span class="line">                                rproducts.put(x, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span>(!rproducts.get(x).contains(GPLUS.get(x).get(i)))&#123;</span><br><span class="line">                                rproducts.get(x).add(GPLUS.get(x).get(i));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rproducts.size()&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;String, ArrayList&lt;Rproduct&gt;&gt; entry : rproducts.entrySet())&#123;</span><br><span class="line">                String key = entry.getKey();</span><br><span class="line">                ArrayList&lt;Rproduct&gt; value = entry.getValue();</span><br><span class="line">                <span class="keyword">if</span>(value.size() &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(!item.containsKey(key))&#123;</span><br><span class="line">                        item.put(key,<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(Rproduct rproduct : value)&#123;</span><br><span class="line">                        item.get(key).add(rproduct);</span><br><span class="line">                    &#125;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            LrParser.printHs(item);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rproducts.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求项集的项集闭包，遍历输入item的各个产生式，对item中每个产生式右部待移入的文法符号，若增广文法中有以其为左部的产生式并且不再item中，则把这个产生式加入到item中，最终item是一个项目集闭包。</p><h4 id="一个辅助函数：实现深度拷贝"><a href="#一个辅助函数：实现深度拷贝" class="headerlink" title="一个辅助函数：实现深度拷贝"></a>一个辅助函数：实现深度拷贝</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Serializable&gt; <span class="function">T <span class="title">myClone</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">    T clonedObj = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">        clonedObj = (T) ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clonedObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求项目集闭包item对应于x的后继项目集闭包"><a href="#求项目集闭包item对应于x的后继项目集闭包" class="headerlink" title="求项目集闭包item对应于x的后继项目集闭包"></a>求项目集闭包item对应于x的后继项目集闭包</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; go(HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; item, String x)&#123;</span><br><span class="line">    HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; j = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; itemClone = myClone(item);</span><br><span class="line">    <span class="keyword">for</span>(Map.Entry&lt;String, ArrayList&lt;Rproduct&gt;&gt; entry : itemClone.entrySet())&#123;</span><br><span class="line">        String key = entry.getKey();</span><br><span class="line">        ArrayList&lt;Rproduct&gt; value = entry.getValue();</span><br><span class="line">        <span class="keyword">for</span>(Rproduct rproduct : value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rproduct.pointer&lt;rproduct.len)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!j.containsKey(key) &amp;&amp; rproduct.getNext().equals(x))&#123;</span><br><span class="line">                    j.put(key, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                    rproduct.pointer++;</span><br><span class="line">                    j.get(key).add(rproduct);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rproduct.getNext().equals(x))&#123;</span><br><span class="line">                    rproduct.pointer++;</span><br><span class="line">                    j.get(key).add(rproduct);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> LrParser.getClosure(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求一个项目集闭包item对应于x的后继项目集闭包。遍历item的每一个产生式，若产生式的移入指针指向的文法符号为x，则将该产生式的移入指针后移一位，遍历完成后，对新的item用getClosure函数求其对应的项目集闭包。</p><h4 id="初始化规范化项集族"><a href="#初始化规范化项集族" class="headerlink" title="初始化规范化项集族"></a>初始化规范化项集族</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initC</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; item = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    item.put(<span class="string">"G"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"P"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    Queue&lt;Integer&gt; pointer = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    pointer.add(i);</span><br><span class="line">    C.put(i,LrParser.getClosure(item));</span><br><span class="line">    HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; gotoix;</span><br><span class="line">    <span class="keyword">while</span> (!pointer.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">int</span> j = pointer.poll();</span><br><span class="line">        HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; cItem = C.get(j);</span><br><span class="line">        HashMap&lt;String, Integer&gt; flag = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        LrParser.printHs(cItem);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String, ArrayList&lt;Rproduct&gt;&gt; entry : cItem.entrySet())&#123;</span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            ArrayList&lt;Rproduct&gt; value = entry.getValue();</span><br><span class="line">            <span class="keyword">for</span> (Rproduct rproduct : value) &#123;</span><br><span class="line">                String x = rproduct.getNext();</span><br><span class="line">                <span class="keyword">if</span>(x!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    flag.put(x, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String, Integer&gt; entryflag : flag.entrySet())&#123;</span><br><span class="line">            String flagkey = entryflag.getKey();</span><br><span class="line">            HashMap&lt;Integer, String&gt; source = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span>(!<span class="string">"epsilon"</span>.equals(flagkey) &amp;&amp; flagkey!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                gotoix = LrParser.go(C.get(j),flagkey);</span><br><span class="line">                <span class="keyword">int</span> index = LrParser.isinC(gotoix);</span><br><span class="line">                <span class="keyword">if</span>(gotoix != <span class="keyword">null</span> &amp;&amp; index==-<span class="number">1</span>)&#123;</span><br><span class="line">                    C.put(++i,gotoix);</span><br><span class="line">                    pointer.add(i);</span><br><span class="line">                    source.put(j,flagkey);</span><br><span class="line">                    GOTO.put((HashMap&lt;Integer, String&gt;) source.clone(),i);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    source.put(j,flagkey);</span><br><span class="line">                    GOTO.put((HashMap&lt;Integer, String&gt;) source.clone(),index);</span><br><span class="line">                &#125;</span><br><span class="line">                source.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        flag.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化规范项集族，首先将开始符号对应的一条产生式作为状态0加入到规范化项集族，将其状态号加入队列，接下来是while循环，当队列不为空的时候，弹出队首状态j，获取该状态对应的项集闭包，然后遍历该项集闭包中产生式，若产生式对应的移入指针指向的文法符号不为空（epsilon也认为空）设为x，则调用go函数求得该j状态对应项目集闭包对应于x的后继项目集闭包，判断后继项目集闭包是否在规范项集族中，若不在则构造新的状态，并将新状态标号加入队列。当队列为空时，规范化项集族便求出。</p><h4 id="初始化SLR分析表"><a href="#初始化SLR分析表" class="headerlink" title="初始化SLR分析表"></a>初始化SLR分析表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initLrTable</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Map.Entry&lt;Integer, HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt;&gt; entry : C.entrySet())&#123;</span><br><span class="line">        <span class="keyword">int</span> key = entry.getKey();</span><br><span class="line">        HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; value = entry.getValue();</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String, ArrayList&lt;Rproduct&gt;&gt; entry2 : value.entrySet())&#123;</span><br><span class="line">            String lP = entry2.getKey();</span><br><span class="line">            ArrayList&lt;Rproduct&gt; rP = entry2.getValue();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;rP.size(); i++)&#123;</span><br><span class="line">                Rproduct rproduct = rP.get(i);</span><br><span class="line">                String variable = rproduct.getNext();</span><br><span class="line">                HashMap&lt;Integer,String&gt; actionKey = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                <span class="keyword">if</span>(variable != <span class="keyword">null</span> &amp;&amp; !<span class="string">"epsilon"</span>.equals(variable))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(Arrays.asList(vt).contains(variable))&#123;</span><br><span class="line">                        actionKey.put(key,variable);</span><br><span class="line">                        <span class="keyword">int</span> des = GOTO.get(actionKey);</span><br><span class="line">                        ACTION.put((HashMap&lt;Integer, String&gt;) actionKey.clone(),<span class="string">"s"</span>+des);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Arrays.asList(vn).contains(variable))&#123;</span><br><span class="line">                        <span class="comment">/*在初始化规范项集族时已求出*/</span></span><br><span class="line">                        actionKey.put(key,variable);</span><br><span class="line">                        <span class="keyword">int</span> des = GOTO.get(actionKey);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    HashSet&lt;String&gt; followLp = follow(lP);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;vt.length; k++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(followLp.contains(vt[k]))&#123;</span><br><span class="line">                            <span class="keyword">if</span>(!<span class="string">"G"</span>.equals(lP))&#123;</span><br><span class="line">                                actionKey.put(key,vt[k]);</span><br><span class="line">                                ACTION.put((HashMap&lt;Integer, String&gt;) actionKey.clone(),<span class="string">"r"</span>+lP+rproduct.no);</span><br><span class="line">                            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                actionKey.put(key,<span class="string">"$"</span>);</span><br><span class="line">                                ACTION.put((HashMap&lt;Integer, String&gt;) actionKey.clone(),<span class="string">"acc"</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        actionKey.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                actionKey.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化slr分析表，遍历求出的规范化项集族，即遍历每个状态j的每一条产生式p，获取该产生式移入指针指向的文法符号x。若x不为空也不为epsilon，则进一步判断该文法符号是否是终结符号，若x是终结符号，填写ACTION表项，即状态j遇到文法符号x执行移入x并进入状态GO(j,x)，若x是非终结符号，填写GOTO表项，即状态j遇到文法符号x进入状态GO(j,x)；若x为空或epsilon，首先求产生式p左部文法符号的follow集，对任何在follow集中的终结符号，若p左部不是开始符号G，填写ACTION表项，即状态j遇到文法符号x按产生式p进行归约；若p左部是开始符号G，则表示语法分析完成，填写ACTION表项即状态j遇到末尾符”$”则acc。</p><h4 id="SLR分析器"><a href="#SLR分析器" class="headerlink" title="SLR分析器"></a>SLR分析器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">slrParser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    reduce.clear();</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> state = <span class="number">0</span>;</span><br><span class="line">    Stack&lt;Integer&gt; stateStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    stateStack.push(state);</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        state = stateStack.peek();</span><br><span class="line">        Word symbol = Word.token.get(index);</span><br><span class="line">        HashMap&lt;Integer,String&gt; s1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        s1.put(state,symbol.getType());</span><br><span class="line">        <span class="keyword">if</span>(ACTION.containsKey(s1))&#123;</span><br><span class="line">            String action = ACTION.get(s1);</span><br><span class="line">            <span class="keyword">if</span>(action.charAt(<span class="number">0</span>) == <span class="string">'s'</span>)&#123;</span><br><span class="line">                stateStack.push(Integer.parseInt(action.substring(<span class="number">1</span>)));</span><br><span class="line">                <span class="keyword">int</span> x = stateStack.peek();</span><br><span class="line">                index++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(action.charAt(<span class="number">0</span>) == <span class="string">'r'</span>)&#123;</span><br><span class="line">                String leftProduct = action.substring(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">int</span> productNo = Integer.parseInt(action.substring(<span class="number">2</span>));</span><br><span class="line">                <span class="keyword">int</span> popLen;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"epsilon"</span>.equals(GPLUS.get(leftProduct).get(productNo).symbol[<span class="number">0</span>]))&#123;</span><br><span class="line">                    popLen = <span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    popLen = GPLUS.get(leftProduct).get(productNo).len;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(;popLen&gt;<span class="number">0</span>;popLen--)&#123;</span><br><span class="line">                    stateStack.pop();</span><br><span class="line">                    <span class="keyword">int</span> x = stateStack.peek();</span><br><span class="line">                &#125;</span><br><span class="line">                state = stateStack.peek();</span><br><span class="line">                HashMap&lt;Integer,String&gt; s2 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                s2.put(state,leftProduct);</span><br><span class="line">                stateStack.push(GOTO.get(s2));</span><br><span class="line">                reduce.add(leftProduct+<span class="string">"-&gt;"</span>+GPLUS.get(leftProduct).get(productNo).printProduct());</span><br><span class="line">                <span class="keyword">int</span> x = stateStack.peek();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"acc"</span>.equals(action))&#123;</span><br><span class="line">                reduce.add(<span class="string">"G-&gt;P 语法分析完成"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                reduce.add(<span class="string">"语法错误"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            reduce.add(<span class="string">"语法错误"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>slr分析器主程序，初始化一个状态栈，将0状态入栈，进入while(true)循环，获取栈顶状态state，读入词法分析阶段token表第一个单词symbol，若ACTION中存在键(state,symbol)，则获取该键对应的值即移入归约动作，若是移入动作，则将移入symbol后进入的状态压入状态栈；若是归约动作，则按归约所用的产生式归约，具体做法为从状态栈中弹出n个状态，n是归约产生式右部文法符号的个数（epsilon产生式右部文法符号个数认为是0个），并用GOTO表获取此时栈顶状态遇到归约所用产生式左部文法符号时进入的后继状态，并将这个后继状态压入状态栈；若是acc动作，输出语法分析完成，表示输入为正确的语法；对于其他情况，输出error，表示语法错误。</p>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法分析 - 语法制导翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自底向上分析法</title>
      <link href="/amumu547426.github.io/2020/06/28/BottomUpG/"/>
      <url>/amumu547426.github.io/2020/06/28/BottomUpG/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\amumu547426.github.io\assets\css\APlayer.min.css"><script src="\amumu547426.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\amumu547426.github.io\assets\js\Meting.min.js"></script><h2 id="自底向上语法分析技术"><a href="#自底向上语法分析技术" class="headerlink" title="自底向上语法分析技术"></a>自底向上语法分析技术</h2><p>思想：从分析树的底部向顶部方向构造分析树，是将输入串w归约为文法开始符号S的过程。自顶向下语法分析采用最左推导方式，而自底向上的语法分析采用最左归约方式（规范归约）。</p><h3 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h3><p>短语：若S=&gt;*αAβ并且A=&gt;+γ，则称γ是句型αγβ的相对于变量A的短语<br>直接短语：若S=&gt;*αAβ并且A=&gt;γ，则称γ是句型αγβ的相对于变量A的直接短语<br>句柄：若S=&gt;*αAw=&gt;αβw，则称β是句型αβw相对于A→β的直接短语，一个句型的最左直接短语称为该句型的句柄</p><p>在一个最右句型句柄右边只有终结符号，若文法无二义性，那么每个句型都有且只有一个句柄。</p><p>句型的句柄与一个产生式右部相匹配，将句柄归约为该产生式左部非终结符号代表了最右推导中的逆过程的一步。</p><h3 id="规范归约"><a href="#规范归约" class="headerlink" title="规范归约"></a>规范归约</h3><p>设α为文法G的句子，若</p><ul><li>α= <h>α<sub>n</sub></h>&lt;=<h>α<sub>n-1</sub></h>&lt;=……&lt;=<h>α<sub>2</sub></h>&lt;=<h>α<sub>1</sub></h>=S</li><li>对每个i(1≤i≤n)，<h>α<sub>i-1</sub></h>是将句型α$_i$中的句柄归约后得到的句型</li><li>则称<h>α<sub>n</sub></h>……<h>α<sub>1</sub></h>为α的规范归约序列</li></ul><h3 id="移入-归约分析"><a href="#移入-归约分析" class="headerlink" title="移入-归约分析"></a>移入-归约分析</h3><p>使用一个栈来保存归约/扫描移入的文法符号，栈中符号（自底向上）和待扫描的符号组成了一个最右句型。</p><ul><li>移入：将下一个输入符号移动到栈顶</li><li>归约：将句柄归约为相应的非终结符号，句柄总是在栈顶。具体操作时弹出句柄，压入被归约到的非终结符号。</li><li>接受：宣布分析过程成功完成</li><li>报错：发现语法错误，调用错误恢复子程序</li></ul><h4 id="移入-归约中的存在的问题举例："><a href="#移入-归约中的存在的问题举例：" class="headerlink" title="移入-归约中的存在的问题举例："></a>移入-归约中的存在的问题举例：</h4><p>对于如下文法：</p><p>（1）&lt;S&gt;→var&lt;IDS&gt;:&lt;T&gt;                                                                                      </p><p>（2）&lt;IDS&gt;→i</p><p>（3）&lt;IDS;T&gt;→&lt;IDS&gt;,i</p><p>（4）&lt;T&gt;→real | int</p><table><thead><tr><th></th><th>栈</th><th align="left">剩余输入</th><th>动作</th></tr></thead><tbody><tr><td>1</td><td>&#36;</td><td align="left">var <h>i<sub>A</sub></h> , <h>i<sub>B</sub></h> : real &#36;</td><td></td></tr><tr><td>2</td><td>&#36;var</td><td align="left"><h>i<sub>A</sub></h> , <h>i<sub>B</sub></h> : real &#36;</td><td>移入</td></tr><tr><td>3</td><td>&#36;var <h>i<sub>A</sub></h></td><td align="left">, <h>i<sub>B</sub></h> : real &#36;</td><td>移入</td></tr><tr><td>4</td><td>&#36;var &lt;IDS&gt;</td><td align="left">, <h>i<sub>B</sub></h> : real &#36;</td><td>按（2）归约</td></tr><tr><td>5</td><td>&#36;var &lt;IDS&gt;,</td><td align="left"><h>i<sub>B</sub></h> : real &#36;</td><td>移入</td></tr><tr><td>6</td><td>&#36;var &lt;IDS&gt;,<h>i<sub>B</sub></h></td><td align="left">: real &#36;</td><td>移入</td></tr><tr><td>7</td><td>&#36;var &lt;IDS&gt;,&lt;IDS&gt;</td><td align="left">: real &#36;</td><td>按（2）归约</td></tr><tr><td>8</td><td>&#36;var &lt;IDS&gt;,&lt;IDS&gt;:</td><td align="left">real &#36;</td><td>移入</td></tr><tr><td>9</td><td>&#36;var &lt;IDS&gt;,&lt;IDS&gt;:real</td><td align="left">real &#36;</td><td>移入</td></tr><tr><td>10</td><td>&#36;var &lt;IDS&gt;,&lt;IDS&gt;:&lt;T&gt;</td><td align="left">&#36;</td><td>按（4）归约，报错</td></tr></tbody></table><p>识别的句子显然是属于该文法的，然而分析过程中却报错，是因为在第6步移入的终结符号<h>i<sub>B</sub></h>并不是一个句柄，而在第7步对一个错误的句柄进行了归约。</p><p><img src= "/amumu547426.github.io/img/loading.gif" data-src="pic1.png" alt=""></p><p>对于每个句型，都能构造该句型的分析树，上图为第六步的分析树，下面给出关于分析树的一些定义：</p><div class="note info">            <p>根节点：文法的开始符号<br>边缘：分析树的边缘为从左到右排列叶节点得到的符号串<br>短语：分析树中每棵子树的边缘称为该句型的一个短语<br>直接短语：若子树只有父子两代结点（高度为2），则该子树的边缘称为该句型的一个直接短语</p>          </div><p>句柄是句型的最左直接短语，它是分析树中某棵高度为2的子树的边缘，在上图所示的对应于第6步的分析树中，<h>i<sub>B</sub></h>不是某棵高度为2的子树的边缘。当前句型有两个直接短语：   </p><ul><li>一是以&lt;IDS&gt;为根节点的高度为2的子树的边缘&lt;IDS&gt;,<h>i<sub>B</sub></h></li><li>二是以&lt;T&gt;为根节点的高度为2的子树的边缘real</li></ul><p>最左直接短语即&lt;IDS&gt;,<h>i<sub>B</sub></h>为句柄，因此正确做法是将&lt;IDS&gt;,<h>i<sub>B</sub></h>归约为&lt;IDS&gt;。</p><h4 id="确定句柄的两种方法"><a href="#确定句柄的两种方法" class="headerlink" title="确定句柄的两种方法"></a>确定句柄的两种方法</h4><ul><li>优先法：根据归约先后次序为句型中相邻文法符号规定优先关系（本文不讨论）</li><li>状态法：根据句柄的识别状态确定句柄，下文的LR分析法即采用状态法</li></ul><h3 id="LR分析法"><a href="#LR分析法" class="headerlink" title="LR分析法"></a>LR分析法</h3><p>LR文法是最大的，可以构造出响应移入-归约语法分析器的文法类。</p><ul><li>L：对输入进行从左至右扫描</li><li>R：反向构造出一个最右推导序列</li></ul><p>LR(k)分析：</p><ul><li>需要向前查看k个输入符号的LR分析（k=0,1具有实践意义）</li></ul><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>句柄是逐步形成的，用状态表示句柄识别的进展程度。例：对于S→bBB：</p><ul><li>S→·bBB    移进状态</li><li>S→b·BB    待约状态</li><li>S→bB·B    待约状态</li><li>S→bBB·    归约状态</li></ul><p>LR分析器基于这样一些状态来构造自动机进行句柄识别。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>LR语法分析器由表格驱动；虽然手工构造表格工作量大，但表格可以自动生成</li><li>对于几乎所有的程序设计语言，只要写出上下文无关文法，就能够构造出识别该构造的LR语法分析器</li><li>最通用的无回溯移入归约分析技术，且和其它技术一样高效</li><li>可以尽早检测到错误</li><li>能分析的文法集合是LL(k)文法的超集，例如上下文无关文法就是正则文法的超集</li></ul><h3 id="分析器总体结构"><a href="#分析器总体结构" class="headerlink" title="分析器总体结构"></a>分析器总体结构</h3><p><img src= "/amumu547426.github.io/img/loading.gif" data-src="pic2.png" alt=""></p><h3 id="LR-0-分析"><a href="#LR-0-分析" class="headerlink" title="LR(0)分析"></a>LR(0)分析</h3><h4 id="LR-0-项和LR-0-自动机"><a href="#LR-0-项和LR-0-自动机" class="headerlink" title="LR(0)项和LR(0)自动机"></a>LR(0)项和LR(0)自动机</h4><p>LR语法分析器的栈中元素包含状态，状态指明了在移入归约分析中的位置。状态是项的集合。</p><p>LR(0)项：</p><ul><li>文法的产生式加上在产生式体某处的一个点，例A→·XYZ，A→X·YZ，A→XY·Z，A→XYZ·</li><li>A→ε只有一个项A→·</li></ul><h4 id="规范LR-0-项集族"><a href="#规范LR-0-项集族" class="headerlink" title="规范LR(0)项集族"></a>规范LR(0)项集族</h4><p>规范LR(0)项集族的项集可作为LR(0)自动机的状态，并以此为基础构造自动机的基础。</p><p>LR(0)语法分析过程：</p><ul><li>状态存放在栈中</li><li>栈中的状态（自底向上）形成自动机的一条路径，路径上的标号就是栈中的文法符号序列</li><li>若到达接受状态，则栈顶某个符号串形成句柄  </li></ul><h5 id="规范LR-0-项集族的构造"><a href="#规范LR-0-项集族的构造" class="headerlink" title="规范LR(0)项集族的构造"></a>规范LR(0)项集族的构造</h5><p>增广文法：G的增广文法G’是在G中增加新的开始符号S’，并加入产生式S’→S得到的。</p><p>用到的子函数：</p><ul><li>CLOSURE(I)：I的项集闭包</li><li>GOTO(I,X)：I的X后继</li></ul><p>CLOSURE(I)构造算法：</p><ul><li>首先将I中的各个项加入到CLOSURE(I)中</li><li>如果A→α·Bβ在CLOSURE(I)中，那么对B的任意产生式B→γ，将B→·γ加到CLOSURE(I)中</li><li>不断重复第二步，直到收敛</li></ul><p>例：增广文法：</p><ul><li>E&#39;→E</li><li>E→E+T | T</li><li>T→T*F | F</li><li>F→（E) | id</li></ul><p>项集{[E‘→E]}的闭包：</p><ul><li>[E&#39;→·E]</li><li>[E→·E+T]，[E→·T]</li><li>[T→·T*F]，[T→·F]</li><li>[F→·(E)]，[F→·id]</li></ul><p>GOTO函数：</p><ul><li>GOTO(I,X)：I中形如[A→α·Xβ]的项对应的项[A→αX·β]的闭包，定义了LR(0)自动机中状态I在X之上的转换</li><li>例：I={[E&#39;→E·],[E→E·+T]}，则GOTO(I,+)：<ul><li>I中第二项·后出现+，对应项为[E→E·+T]</li><li>GOTO(I,+)=CLOSURE({[E→E+·T]})={ [E→E+·T], [T→·T*F], [T→·F], [F→·(E)], [F→·id] }</li></ul></li></ul><p>求增广文法G’的LR(0)项集规范族算法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void items(G&#39;)&#123;</span><br><span class="line">C &#x3D; CLOSURE(&#123;[S&#39;→·S]&#125;);</span><br><span class="line">repeat</span><br><span class="line">for (C中的每个项集I)</span><br><span class="line">for (，每个文法符号X)</span><br><span class="line">if (GOTO(I,X)非空且不在C中)</span><br><span class="line">将GOTO(I,X)加入C中；</span><br><span class="line">until 没有新的项集加入到C</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上例中的增广文法，求出各个规范集族为：</p><p><img src= "/amumu547426.github.io/img/loading.gif" data-src="pic3.png" alt=""></p><h4 id="如何使用LR-0-自动机"><a href="#如何使用LR-0-自动机" class="headerlink" title="如何使用LR(0)自动机"></a>如何使用LR(0)自动机</h4><p>假设文法符号串γ是LR(0)自动机从开始状态运行到状态j路径上的输入符号的串，那么</p><ul><li>若下个输入符号为a，且j状态有一个a上的转换，则移入a</li><li>若j中有形如A→a·的项，则按A→a归约</li><li>若有多种可能，即存在冲突</li></ul><p>LR语法分析表的结构有两部分，动作ACTION和转换GOTO，ACTION(i,a)其中i为状态，a为终结符，表示状态i遇到终结符a应采取的动作；GOTO(i,A)其实i为状态，A为非终结符，表示i遇到归约出的A应进入的状态。下面给出构造LR(0)分析表的算法：</p><p>为表区分，构造规范LR(0)项集族的GOTO函数在这里用GO表示</p><p>sj表示移入终结符号，进入状态j；rj表示按第j个产生式归约</p><ul><li>0为开始状态</li><li>对<h>I<sub>i</sub></h>∈C：<ul><li>if A→α·aβ∈<h>I<sub>i</sub></h> and GO(<h>I<sub>i</sub></h>,a)=<h>I<sub>j</sub></h> then ACTION[i,a] = sj</li><li>if A→α·Bβ∈<h>I<sub>i</sub></h> and GO(<h>I<sub>i</sub></h>,B)=<h>I<sub>j</sub></h> then GOTO[i,B] = j</li><li>if A→α·属于<h>I<sub>i</sub></h>  then<ul><li>for ∀a∈T∪{$} do<ul><li>ACTION[i,a] = rj</li></ul></li></ul></li><li>if S’→S·∈<h>I<sub>i</sub></h> then ACTION[i,$] = acc</li></ul></li><li>空格处为error</li></ul><h5 id="LR语法分析算法"><a href="#LR语法分析算法" class="headerlink" title="LR语法分析算法"></a>LR语法分析算法</h5><p>输入：文法G的LR语法分析表，输入串w</p><p>输出：若w在L(G)中，输出最左归约步骤，否则输出错误提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">令a为w$的第一个符号</span><br><span class="line">while(true)&#123;</span><br><span class="line">令s为栈顶状态;</span><br><span class="line">if(ACTION[s,a] &#x3D; 移入t)&#123;</span><br><span class="line">        将t压入栈中；</span><br><span class="line">        令a为下一个输入符号</span><br><span class="line">&#125;else if(ACTION[s,a] &#x3D; 规约A→β)&#123;</span><br><span class="line">从栈中弹出|β|个符号;</span><br><span class="line">令t为当前栈顶状态;</span><br><span class="line">将GOTO[t,A]压入栈中;</span><br><span class="line">输出产生式A→β</span><br><span class="line">&#125;else if(ACTION[s,a] &#x3D; acc) break;</span><br><span class="line">else 调用错误恢复例程;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用以下例子说明分析过程，分析id*id：</p><table><thead><tr><th></th><th>栈</th><th>符号</th><th align="left">输入</th><th align="left">动作</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>$</td><td align="left">id*id$</td><td align="left">移入id，进入5</td></tr><tr><td>2</td><td>0 5</td><td>$id</td><td align="left">*id$</td><td align="left">按F→id归约，5出栈，0遇到F进入3</td></tr><tr><td>3</td><td>0 3</td><td>$F</td><td align="left">*id$</td><td align="left">按T→F归约，3出栈，0遇到T进入2</td></tr><tr><td>4</td><td>0 2</td><td>$T</td><td align="left">*id$</td><td align="left">移入*，进入7</td></tr><tr><td>5</td><td>0 2 7</td><td>$T*</td><td align="left">id$</td><td align="left">移入id，进入5</td></tr><tr><td>6</td><td>0 2 7 5</td><td>$T*id</td><td align="left">$</td><td align="left">按F→id归约，5出栈，7遇到F进入10</td></tr><tr><td>7</td><td>0 2 7 10</td><td>$T*F</td><td align="left">$</td><td align="left">按T→T*F归约，10，7，2出栈，0遇到T进入2</td></tr><tr><td>8</td><td>0 2</td><td>$T</td><td align="left">$</td><td align="left">按E→T归约，2出栈。0遇到E进入1</td></tr><tr><td>9</td><td>0 1</td><td>$E</td><td align="left">$</td><td align="left">接受</td></tr></tbody></table><h4 id="LR-0-分析过程中的冲突"><a href="#LR-0-分析过程中的冲突" class="headerlink" title="LR(0)分析过程中的冲突"></a>LR(0)分析过程中的冲突</h4><p>对于该部分采用的增广文法的例子，观察其LR(0)自动机状态转换图可以发现，在<h>I<sub>2</sub></h>和<h>I<sub>9</sub></h>中在下一个输入符号为*的情况下，不知道是该采取归约动作还是移入动作  。若LR(0)分析表中没有语法分析动作的冲入，则称其为LR(0)文法。不是所有的CFG都能用LR(0)方法分析。</p>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语法制导翻译</title>
      <link href="/amumu547426.github.io/2020/06/21/SDD/"/>
      <url>/amumu547426.github.io/2020/06/21/SDD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\amumu547426.github.io\assets\css\APlayer.min.css"><script src="\amumu547426.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\amumu547426.github.io\assets\js\Meting.min.js"></script><h1 id="语法制导翻译"><a href="#语法制导翻译" class="headerlink" title="语法制导翻译"></a>语法制导翻译</h1><p>翻译的任务是语义分析和正确性检查，若正确，则翻译成中间代码或目标代码。</p><p>基本思想：</p><ul><li>语法结构具有规定的语义</li><li>根据翻译的需要设置文法符号的属性，已描述语法结构的语义<ul><li>例如一个变量的属性有类型，层次，存储地址等。表达式属性有类型，值</li></ul></li><li>属性值的计算和产生式相联系，随着语法分析的进行，执行属性值的计算，完成语义分析和翻译的任务</li></ul><p>语法制导定义SDD是上下文无关文发CFG和属性/规则的结合，属性和文法符号相关联，规则和产生式相关联。</p><p>语法制导翻译是在产生式体中加入语义动作，并在适当的时候执行这些语义动作。</p><h2 id="语法制导定义SDD"><a href="#语法制导定义SDD" class="headerlink" title="语法制导定义SDD"></a>语法制导定义SDD</h2><p>语义分析的任务：</p><ul><li>语义检查<ul><li>例：类型、运算、维数、越界</li></ul></li><li>语义处理<ul><li>例：变量的存储分配、表达式求值、语句的翻译（中间代码的生成）</li></ul></li></ul><p>处理办法有两种：</p><ul><li><p>对每一个产生式编制一个语义子程序，当一个产生式获得匹配时，调用相应的语义子程序实现语义检查与翻译</p><ul><li>E→<h>E<sub>1</sub></h>+T       E.val:=E.val+T.val</li><li>T→<h>T<sub>1</sub></h>*F       <h>T<sub>1</sub></h>.val:=E.val*F.val</li><li>F→id                             F.val:=id.val</li></ul></li><li><p>适合在完成归约时进行</p></li><li><p>在产生式右部适当位置，插入相应的语义动作，按照分析的进程，执行遇到的语义动作</p><ul><li>D→T {L.in:=T.type} L</li><li>T→int {T.type:=integer}</li><li>T→real {T.type:=real}</li><li>L→{<h>L<sub>1</sub></h>.inh:=L.inh}<h>L<sub>1</sub></h>, id{…}</li></ul></li><li><p>适合在进行推导时完成</p></li></ul><h3 id="继承属性和综合属性"><a href="#继承属性和综合属性" class="headerlink" title="继承属性和综合属性"></a>继承属性和综合属性</h3><p>综合属性：分析树结点N上的非终结符号A的属性值由N的产生式所关联的语义规则定义，又称S-属性定义。必然通过N的子结点或N本身的属性值来定义。</p><p>继承属性：分析树结点N的属性值由N的父节点所关联的语义规则来定义，又称为L-属性定义。依赖于N的父结点，N本身和N的兄弟结点上的属性值。</p><p>不允许N的继承属性通过N的子结点上的属性来定义，但允许N的综合属性依赖于N本身的继承属性。终结符号有综合属性，但没有继承属性。</p><h4 id="S属性的SDD，可以按照自底向上方式求值："><a href="#S属性的SDD，可以按照自底向上方式求值：" class="headerlink" title="S属性的SDD，可以按照自底向上方式求值："></a>S属性的SDD，可以按照自底向上方式求值：</h4><table><thead><tr><th>产生式</th><th>语义规则</th></tr></thead><tbody><tr><td>L→E n</td><td>L.val = E.val</td></tr><tr><td>E→<h>E<sub>1</sub></h>+T</td><td>E.val = <h>E<sub>1</sub></h>.val+T.val</td></tr><tr><td>E→T</td><td>E.val = T.val</td></tr><tr><td>T→<h>T<sub>1</sub></h>*F</td><td>T.val = <h>T<sub>1</sub></h>.val*F.val</td></tr><tr><td>T→F</td><td>T.val = F.va;</td></tr><tr><td>F→(E)</td><td>F.val = E.val</td></tr><tr><td>F→digit</td><td>F.val = digit.lexval</td></tr></tbody></table><p>输入3*5+4n的注释语法分析树：</p><p><img src= "/amumu547426.github.io/img/loading.gif" data-src="pic1.png" alt=""></p><h4 id="适用自顶向下分析的SDD，带有综合属性的SDD："><a href="#适用自顶向下分析的SDD，带有综合属性的SDD：" class="headerlink" title="适用自顶向下分析的SDD，带有综合属性的SDD："></a>适用自顶向下分析的SDD，带有综合属性的SDD：</h4><p>例如如下消除左递归的表达式文法</p><ul><li>T→FT&#39;</li><li>T&#39;→*F<h>T<sub>1</sub></h>&#39;</li><li>T&#39;→ε</li><li>F→digit</li></ul><p>T中不含运算符，无法直接使用综合属性。</p><table><thead><tr><th>产生式</th><th>语义规则</th></tr></thead><tbody><tr><td>T→FT&#39;</td><td>T&#39;.inh = F.val <br> T.val = T&#39;.syn</td></tr><tr><td>T&#39;→*F<h>T<sub>1</sub></h>&#39;</td><td><h>T<sub>1</sub></h>&#39;.inh = T&#39;.inh*F.val  <br> T&#39;.syn = <h>T<sub>1</sub></h>&#39;.syn</td></tr><tr><td>T&#39;→ε</td><td>T&#39;.syn = T&#39;.inh</td></tr><tr><td>F→digit</td><td>F.val = digit.lexval</td></tr></tbody></table><p>  <img src= "/amumu547426.github.io/img/loading.gif" data-src="pic2.png" alt=""><br>  <img src= "/amumu547426.github.io/img/loading.gif" data-src="pic3.png" alt=""></p><h3 id="SDD的求值顺序"><a href="#SDD的求值顺序" class="headerlink" title="SDD的求值顺序"></a>SDD的求值顺序</h3><p>依赖图描述了某棵特定的分析树上各个属性实例之间的信息流。</p><p>依赖图的构造：</p><ul><li>对分析树每个结点X，对与X对应的文法符号的每个属性a，在依赖图中为a构造一个结点</li><li>若属性X.a的值依赖于Y.b的值，则构造一条从Y.b指向X.a的有向边</li></ul><p>形如a*b的语法分析树：</p><p>  <img src= "/amumu547426.github.io/img/loading.gif" data-src="pic4.png" alt=""></p><p>可能的计算顺序：1,2,3,4,5,6,7,8,9或1,3,5,2,4,6,7,8,9</p><p>属性值计算顺序可以按依赖图的拓扑排序来计算，图中不能存在环。给定一个SDD很难判定是否存在一颗分析树，其对应的依赖图包含环。而特定的SDD一定不包含环，且具有固定的排序模式–S属性SDD和L属性SDD</p><h4 id="S属性的SDD"><a href="#S属性的SDD" class="headerlink" title="S属性的SDD"></a>S属性的SDD</h4><ul><li>每个属性都是综合属性</li><li>都是根据子构造的属性计算整个构造的属性</li><li>在依赖图中，通过子结点的属性计算父结点的属性<ul><li>自底向上方法：在构造分析树子结点同时计算相关属性</li><li>自顶向下方法：在递归子程序法中，在过程A()的最后计算A得属性</li></ul></li></ul><p>在分析树上自底向上计算SDD时，可采用后序遍历。</p><h4 id="L属性的SDD"><a href="#L属性的SDD" class="headerlink" title="L属性的SDD"></a>L属性的SDD</h4><ul><li>每个属性<ul><li>要么是综合属性</li><li>要么是继承属性，且产生式A→<h>X<sub>1</sub></h><h>X2</h>…<h>X<sub>n</sub></h>中<h>X<sub>i</sub></h>的继承属性仅依赖于<ul><li>A的继承属性</li><li><h>X<sub>i</sub></h>左边符号<h>X<sub>1</sub></h>，<h>X<sub>2</sub></h>，…<h>X<sub>i-1</sub></h>的属性</li><li><h>X<sub>i</sub></h>本身的属性，但<h>X<sub>i</sub></h>的全部属性不能在依赖图中形成环路</li></ul></li></ul></li></ul><p>在依赖图中看，依赖图的边只能从左到右，不能从右到左。</p><h2 id="语法制导翻译方案SDT"><a href="#语法制导翻译方案SDT" class="headerlink" title="语法制导翻译方案SDT"></a>语法制导翻译方案SDT</h2><p>语法制导翻译方案SDT是在产生式体中嵌入程序片段（语义动作）的上下文无关文法。</p><p>SDT的基本实现方法是建立语法分析树，然后从左向右，深度优先的执行这些动作。用SDT实现两类重要的SDD：</p><ul><li>基本文法为LR的，SDD是S属性的</li><li>基本文法是LL的，SDD是L属性的</li></ul><h4 id="后缀翻译方案：S-SDD转SDT"><a href="#后缀翻译方案：S-SDD转SDT" class="headerlink" title="后缀翻译方案：S-SDD转SDT"></a>后缀翻译方案：S-SDD转SDT</h4><p>文法可以自底向上分析且SDD是S属性的，可以构造出SDT，所有动作都放在产生式最后，分析过程中按照这个产生式规约时执行这个动作，计算得到的属性值放在栈中。所有动作都放在产生式右端的SDT称为后缀翻译方案。</p><p>例子：</p><p>L→E n                      {print(E.val);}  </p><p>E→<h>E<sub>1</sub></h>+T   {E.val = <h>E<sub>1</sub></h>.val+T.val:}  </p><p>E→T                         {E.val = T.val;}  </p><p>T→<h>T<sub>1</sub></h>*F   {T.val = <h>T<sub>1</sub></h>.val*F.val;}  </p><p>T→F                         {T.val = F.val;}  </p><p>F→(E)                       {F.val = E.val;}  </p><p>F→digit                    {F.val = digit.lexval;}</p><p>可以再LR语法分析过程中实现：</p><ul><li>归约时执行相应语义动作</li><li>定义可以记录各个文法符号的属性的union结构</li><li>栈中每个文法符号附带一个union结构</li><li>按照产生式A→XYZ归约时，Z的属性可以再栈顶找到，Y的属性在下个位置，X的属性在下下个位置</li></ul><h4 id="L属性定义的SDT"><a href="#L属性定义的SDT" class="headerlink" title="L属性定义的SDT"></a>L属性定义的SDT</h4><ul><li>将计算非终结符号A的继承属性的动作放在产生式中紧靠A之前，如果A有多个属性，要注意属性的计算顺序</li><li>将计算产生式头的综合属性的动作放在产生式的右端</li></ul><p>L属性SDT例子：</p><p>  <img src= "/amumu547426.github.io/img/loading.gif" data-src="pic5.png" alt=""><br>  <img src= "/amumu547426.github.io/img/loading.gif" data-src="pic6.png" alt=""></p><p>L-SDD的SDT实现</p><p>若一个L-SDD的基本文法可以使用LL分析技术，则它的SDT可以在LL或LR语法分析过程中实现，即可在</p><ul><li>非递归预测分析过程中进行语义翻译</li><li>递归预测分析过程中进行语义翻译</li><li>LR分析过程中进行语义翻译</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译方案 </tag>
            
            <tag> 语法制导翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自顶向下分析-LL(1)文法</title>
      <link href="/amumu547426.github.io/2020/06/13/TopDownG/"/>
      <url>/amumu547426.github.io/2020/06/13/TopDownG/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\amumu547426.github.io\assets\css\APlayer.min.css"><script src="\amumu547426.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\amumu547426.github.io\assets\js\Meting.min.js"></script><h3 id="LL-1-文法"><a href="#LL-1-文法" class="headerlink" title="LL(1)文法"></a>LL(1)文法</h3><h4 id="自顶向下分析法希望文法满足的条件"><a href="#自顶向下分析法希望文法满足的条件" class="headerlink" title="自顶向下分析法希望文法满足的条件"></a>自顶向下分析法希望文法满足的条件</h4><p>从左至右扫描输入串，寻找它的一个最左推导；对于G的每个非终结符A，若A有多个不同的候选式时，在选择产生某个终结符号时能唯一选定一个。给定文法S→cAd，A→ab|a，A的候选式ab和a具有相同首部终结符号，LL(1)文法希望避免这种文法。</p><h4 id="串首终结符集-FIRST集"><a href="#串首终结符集-FIRST集" class="headerlink" title="串首终结符集-FIRST集"></a>串首终结符集-FIRST集</h4><p>FIRST(α)即关于α的所有产生式右部第一个遇到终结符。FIRST(α)={a|α=*&gt;a…,a∈$V_t$*}</p><p>求FIRST集的算法</p><ul><li>令α=$X_1$…$X_n$</li><li>初值：<ul><li>FIRST(α)=FIRST($X_1$)-{ε}</li><li>k=1</li></ul></li><li>循环<ul><li>while ε∈FIRST($X_k$) &amp;&amp; k&lt;n  do<ul><li>FIRST(α)=FIRST(α)∪(FIRST($X_{k+1}$)-{ε}) </li><li>k = k+1</li></ul></li></ul></li><li>结束<ul><li>if k==n &amp;&amp; ε∈FIRST($X_k$) then FIRST(α)=FIRST(α)∪{ε}</li></ul></li></ul><h4 id="非终结符后继符号集-FOLLOW集"><a href="#非终结符后继符号集-FOLLOW集" class="headerlink" title="非终结符后继符号集-FOLLOW集"></a>非终结符后继符号集-FOLLOW集</h4><p>FOLLOW(A)即非终结符A的后续符号集。FOLLOW(A)={a|S=<em>&gt;…Aa…,a∈$V_t$\</em>}</p><p>求FOLLOW集的算法</p><ul><li>若B→αAaβ，a是终结符，则把a放入FOLLOW(A)中</li><li>若B→αAXβ，X是非终结符，则把FIRST(Xβ)放入FOLLOW(A)中</li><li>若B→αA或B→αAβ，但β=&gt;ε，则把FOLLOW(B)放入FOLLOW(A)中</li><li>若S是开始符，则$∈FOLLOW(S)</li><li>若A→αBβ，则FIRST(β)中除了ε之外所有符号均在FOLLOW(B)中</li><li>若A→αB或A→αBβ，且FIRST(β)包含ε，则FOLLOW(A)所有符号均在FOLLOW(B)中</li></ul><h4 id="产生式可选集-SELECT集"><a href="#产生式可选集-SELECT集" class="headerlink" title="产生式可选集-SELECT集"></a>产生式可选集-SELECT集</h4><ul><li>产生式A→β的可选集是指可以选用该产生式进行推导时对应的输入符号集合，记为SELECT(A→β)<ul><li>SELECT(A→αβ)={α}</li><li>SELECT(A→ε)=FOLLOW(A)</li></ul></li></ul><h4 id="LL-1-文法-1"><a href="#LL-1-文法-1" class="headerlink" title="LL(1)文法"></a>LL(1)文法</h4><p>对G中任意变量A，A→$a_1$|$a_2$|…|$a_n$是A的所有产生式，若他们满足</p><ul><li>FIRST($a_i$)∩FIRST($a_j$) =Φ       i≠ j</li><li>当ε∈FIRST($a_j$)时，FOLLOW(A)∩FIRST($a_j$)=Φ</li></ul><p>则称G为LL(1)文法。</p><h4 id="LL-1-文法分析原理"><a href="#LL-1-文法分析原理" class="headerlink" title="LL(1)文法分析原理"></a>LL(1)文法分析原理</h4><p><img src= "/amumu547426.github.io/img/loading.gif" data-src="im1.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法分析 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
