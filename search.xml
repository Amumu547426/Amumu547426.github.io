<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>编译原理实验-语法分析器-java</title>
      <link href="/amumu547426.github.io/2020/06/28/slrParser/"/>
      <url>/amumu547426.github.io/2020/06/28/slrParser/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\amumu547426.github.io\assets\css\APlayer.min.css"><script src="\amumu547426.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\amumu547426.github.io\assets\js\Meting.min.js"></script><h2 id="语法分析器"><a href="#语法分析器" class="headerlink" title="语法分析器"></a>语法分析器</h2><h3 id="数据结构定义"><a href="#数据结构定义" class="headerlink" title="数据结构定义"></a>数据结构定义</h3><h4 id="单词和单词token表"><a href="#单词和单词token表" class="headerlink" title="单词和单词token表"></a>单词和单词token表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> compiler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> jpf</span></span><br><span class="line"><span class="comment"> * 词法分析结果</span></span><br><span class="line"><span class="comment"> * value 文法符号名</span></span><br><span class="line"><span class="comment"> * type 符号类型</span></span><br><span class="line"><span class="comment"> * typeCOde 种别码</span></span><br><span class="line"><span class="comment"> * addr 符号表中所在位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Word</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String typeCode;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> addr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Word</span><span class="params">(String value, String typeCode, String type, <span class="keyword">int</span> addr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.typeCode = typeCode;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.addr = addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Word&gt; token = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTypeCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> typeCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTypeCode</span><span class="params">(String typeCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.typeCode = typeCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAddr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddr</span><span class="params">(<span class="keyword">int</span> addr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.addr = addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printToken</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&#123;"</span>+<span class="keyword">this</span>.value+<span class="string">","</span>+<span class="keyword">this</span>.type+<span class="string">","</span>+<span class="keyword">this</span>.typeCode+<span class="string">","</span>+<span class="keyword">this</span>.addr+<span class="string">"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="符号和符号表"><a href="#符号和符号表" class="headerlink" title="符号和符号表"></a>符号和符号表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> compiler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: jpf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/6/12 0012 15:25</span></span><br><span class="line"><span class="comment"> * 符号表</span></span><br><span class="line"><span class="comment"> * name 变量名 如id的值，digit的值</span></span><br><span class="line"><span class="comment"> * type 变量类型</span></span><br><span class="line"><span class="comment"> * val 变量值，暂为null</span></span><br><span class="line"><span class="comment"> * addr 相对地址</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Symbol</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> addr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> offset;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Symbol&gt; symbolsTable = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Symbol</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.index = symbolsTable.size();</span><br><span class="line">        <span class="keyword">this</span>.val = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**获取单词在符号表中的位置 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">wordLocate</span><span class="params">(String word)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;symbolsTable.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(symbolsTable.get(i).name.equals(word))&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**新建一个临时变量，返回其位置*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">newTemp</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        symbolsTable.add(<span class="keyword">new</span> Symbol(<span class="string">"&amp;"</span>+temp));</span><br><span class="line">        symbolsTable.get(symbolsTable.size()-<span class="number">1</span>).type = type;</span><br><span class="line">        symbolsTable.get(symbolsTable.size()-<span class="number">1</span>).addr = offset;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"Integer"</span>.equals(type))&#123;</span><br><span class="line">            offset += <span class="number">4</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"Float"</span>.equals(type))&#123;</span><br><span class="line">            offset += <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp++;</span><br><span class="line">        <span class="keyword">return</span> symbolsTable.size()-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**类型判断，即只能Integer给Integer和Float赋值，而不能反过来*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">typeCheck</span><span class="params">(<span class="keyword">int</span> addr1, <span class="keyword">int</span> addr2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> symbolsTable.get(addr1).type.equals(symbolsTable.get(addr2).type) || <span class="string">"Float"</span>.equals(symbolsTable.get(addr1).type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printSt</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Symbol x : symbolsTable)&#123;</span><br><span class="line">            String mes = String.format(<span class="string">"%2d %5s  %s  %3s"</span>,x.index,x.name,x.type,x.addr);</span><br><span class="line">            System.out.printf(<span class="string">"%s\n"</span>,mes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVal</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAddr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddr</span><span class="params">(<span class="keyword">int</span> addr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.addr = addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="产生式右部"><a href="#产生式右部" class="headerlink" title="产生式右部"></a>产生式右部</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> compiler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: jpf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/6/17 0017 9:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rproduct</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产生式右部数据结构，pointer指明了下一个待移入文法符号</span></span><br><span class="line"><span class="comment">     * len表示有多少个文法符号</span></span><br><span class="line"><span class="comment">     * no表明该产生式编号</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> String[] symbol;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> pointer;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> no;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rproduct</span><span class="params">(String[] symbol, <span class="keyword">int</span> pointer, <span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.symbol = symbol;</span><br><span class="line">        <span class="keyword">this</span>.pointer = pointer;</span><br><span class="line">        <span class="keyword">this</span>.len = symbol.length;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**将symbol第i个位置之后的字符串数组返回*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">divideR</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(i&lt;len)&#123;</span><br><span class="line">            ret.addAll(Arrays.asList(symbol).subList(i, len));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**返回指针指向的符号，即待移进符号*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNext</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pointer &lt; len)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.symbol[pointer];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**输出产生式右部*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">printProduct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String ret = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">            ret += symbol[i]+<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**重写equals方法，symbol和pointer相同即认为相等*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span> || <span class="keyword">this</span>.getClass()!=obj.getClass())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Rproduct rproduct = (Rproduct) obj;</span><br><span class="line">        <span class="keyword">return</span> Arrays.equals(<span class="keyword">this</span>.symbol, rproduct.symbol) &amp;&amp; <span class="keyword">this</span>.pointer == rproduct.pointer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="增广文法，规范项集族，SLR分析表，终结符集合，非终结符集合"><a href="#增广文法，规范项集族，SLR分析表，终结符集合，非终结符集合" class="headerlink" title="增广文法，规范项集族，SLR分析表，终结符集合，非终结符集合"></a>增广文法，规范项集族，SLR分析表，终结符集合，非终结符集合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**M N X Y为附加状态*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] vt = &#123;<span class="string">"id"</span>,<span class="string">"Integer"</span>,<span class="string">"Float"</span>,<span class="string">"int"</span>,<span class="string">"float"</span>,<span class="string">"if"</span>,<span class="string">"("</span>,<span class="string">")"</span>,<span class="string">"else"</span>,<span class="string">"while"</span>,<span class="string">"&gt;"</span>,<span class="string">"&lt;"</span>,<span class="string">"=="</span>,<span class="string">"="</span>,<span class="string">"+"</span>,<span class="string">"-"</span>,<span class="string">"*"</span>,<span class="string">"/"</span>,<span class="string">";"</span>,<span class="string">"$"</span>&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] vn = &#123;<span class="string">"G"</span>,<span class="string">"P"</span>,<span class="string">"D"</span>,<span class="string">"S"</span>,<span class="string">"L"</span>,<span class="string">"C"</span>,<span class="string">"E"</span>,<span class="string">"T"</span>,<span class="string">"F"</span>,<span class="string">"M"</span>,<span class="string">"N"</span>,<span class="string">"X"</span>,<span class="string">"Y"</span>&#125;;</span><br><span class="line"><span class="comment">/**G的增广文法*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; GPLUS = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">/**项集规范族*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Integer,HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt;&gt; C = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">/**slr分析表*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;HashMap&lt;Integer,String&gt;, String&gt; ACTION = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;HashMap&lt;Integer,String&gt;, Integer&gt; GOTO = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">/**归约情况,即用那些产生式归约*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;String&gt; reduce = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="静态初始化增广文法"><a href="#静态初始化增广文法" class="headerlink" title="静态初始化增广文法"></a>静态初始化增广文法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    GPLUS.put(<span class="string">"G"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"P"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    GPLUS.put(<span class="string">"P"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"M"</span>,<span class="string">"D"</span>,<span class="string">"S"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    GPLUS.put(<span class="string">"D"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"L"</span>,<span class="string">"id"</span>,<span class="string">";"</span>,<span class="string">"N"</span>,<span class="string">"D"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"epsilon"</span>&#125;,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    GPLUS.put(<span class="string">"L"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"int"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"float"</span>&#125;,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    <span class="comment">/*---语义分析额外加入产生式*/</span></span><br><span class="line">    GPLUS.put(<span class="string">"M"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"epsilon"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    GPLUS.put(<span class="string">"N"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"epsilon"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    <span class="comment">/*-----------------------*/</span></span><br><span class="line">    GPLUS.put(<span class="string">"S"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"id"</span>,<span class="string">"="</span>,<span class="string">"E"</span>,<span class="string">";"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"if"</span>,<span class="string">"("</span>,<span class="string">"C"</span>,<span class="string">")"</span>,<span class="string">"X"</span>,<span class="string">"S"</span>&#125;,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"if"</span>,<span class="string">"("</span>,<span class="string">"C"</span>,<span class="string">")"</span>,<span class="string">"X"</span>,<span class="string">"S"</span>,<span class="string">"Y"</span>,<span class="string">"else"</span>,<span class="string">"X"</span>,<span class="string">"S"</span>&#125;,<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"while"</span>,<span class="string">"X"</span>,<span class="string">"("</span>,<span class="string">"C"</span>,<span class="string">")"</span>,<span class="string">"X"</span>,<span class="string">"S"</span>&#125;,<span class="number">0</span>,<span class="number">3</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"S"</span>,<span class="string">"X"</span>,<span class="string">"S"</span>&#125;,<span class="number">0</span>,<span class="number">4</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    <span class="comment">/*---语义分析额外加入产生式*/</span></span><br><span class="line">    GPLUS.put(<span class="string">"X"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"epsilon"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    GPLUS.put(<span class="string">"Y"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"epsilon"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    <span class="comment">/*-----------------------*/</span></span><br><span class="line">    GPLUS.put(<span class="string">"C"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"E"</span>,<span class="string">"&gt;"</span>,<span class="string">"E"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"E"</span>,<span class="string">"&lt;"</span>,<span class="string">"E"</span>&#125;,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"E"</span>,<span class="string">"=="</span>,<span class="string">"E"</span>&#125;,<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    GPLUS.put(<span class="string">"E"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"E"</span>,<span class="string">"+"</span>,<span class="string">"T"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"E"</span>,<span class="string">"-"</span>,<span class="string">"T"</span>&#125;,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"T"</span>&#125;,<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    GPLUS.put(<span class="string">"T"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"F"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"T"</span>,<span class="string">"*"</span>,<span class="string">"F"</span>&#125;,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"T"</span>,<span class="string">"/"</span>,<span class="string">"F"</span>&#125;,<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    GPLUS.put(<span class="string">"F"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"("</span>,<span class="string">"E"</span>,<span class="string">")"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"id"</span>&#125;,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"Integer"</span>&#125;,<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"Float"</span>&#125;,<span class="number">0</span>,<span class="number">3</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文法"><a href="#文法" class="headerlink" title="文法"></a>文法</h4><p>G → P</p><p>P → D S</p><p>D →L id ; D |ε</p><p>L → int | float</p><p>S → id = E;      </p><p>S → if (C)  S1  </p><p>S → if (C)  S1  else  S2</p><p>S → while(C)  S1 </p><p>S → S  S</p><p>C → E1 &gt; E2</p><p>C → E1 &lt; E2          </p><p>C → E1 == E2         </p><p>E → E1 + T      </p><p>E → E1 – T   </p><p>E → T             </p><p>T → F             </p><p>T → T1 * F          </p><p>T → T1 / F          </p><p>F → ( E )          </p><p>F → id           </p><p>F → Integer</p><p>F → Float</p><p>注：由于语义翻译部分需要对文法就行修改，故代码中初始化文法为修改后的文法，加入了几个空产生式。epsilon表示空。</p><h3 id="SLR分析器的实现"><a href="#SLR分析器的实现" class="headerlink" title="SLR分析器的实现"></a>SLR分析器的实现</h3><h4 id="判断一组产生式是否包含在在状态集的某个状态中，返回状态值"><a href="#判断一组产生式是否包含在在状态集的某个状态中，返回状态值" class="headerlink" title="判断一组产生式是否包含在在状态集的某个状态中，返回状态值"></a>判断一组产生式是否包含在在状态集的某个状态中，返回状态值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">isinC</span><span class="params">(HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; item)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Map.Entry&lt;Integer,HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt;&gt; entry : C.entrySet())&#123;</span><br><span class="line">        <span class="keyword">int</span> key = entry.getKey();</span><br><span class="line">        HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; value = entry.getValue();</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String, ArrayList&lt;Rproduct&gt;&gt; entry2 : item.entrySet())&#123;</span><br><span class="line">            String key2 = entry2.getKey();</span><br><span class="line">            ArrayList&lt;Rproduct&gt; value2 = entry2.getValue();</span><br><span class="line">            <span class="keyword">if</span>(value.containsKey(key2))&#123;</span><br><span class="line">                <span class="keyword">if</span>(!value.get(key2).containsAll(value2))&#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断一组产生式是否在状态集的某个状态中，若在，返回状态值，否则返回-1。该函数在生成状态集时使用，作用是对于一个状态集的每一个产生式，在接收任何一个文法符号后得到的项目集闭包是否在已生成的状态集中，若在则不必新建状态，若不在则需要新加一个状态。</p><h4 id="求文法符号的first集"><a href="#求文法符号的first集" class="headerlink" title="求文法符号的first集"></a>求文法符号的first集</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HashSet&lt;String&gt; <span class="title">first</span><span class="params">(String x)</span></span>&#123;</span><br><span class="line">    HashSet&lt;String&gt; ret = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(!Arrays.asList(vn).contains(x))&#123;</span><br><span class="line">        ret.add(x);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(GPLUS.containsKey(x))&#123;</span><br><span class="line">        ArrayList&lt;Rproduct&gt; value = GPLUS.get(x);</span><br><span class="line">        <span class="keyword">if</span>(value.contains(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"epsilon"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>)))&#123;</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Rproduct rproduct : value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!rproduct.symbol[<span class="number">0</span>].equals(x))&#123;</span><br><span class="line">                <span class="keyword">if</span>(Arrays.asList(vn).contains(rproduct.symbol[<span class="number">0</span>]))&#123;</span><br><span class="line">                    stack.push(rproduct.symbol[<span class="number">0</span>]);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    ret.add(rproduct.symbol[<span class="number">0</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag &amp;&amp; rproduct.len&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                stack.push(rproduct.symbol[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stack.empty())&#123;</span><br><span class="line">            String firstVn = stack.pop();</span><br><span class="line">            ret.addAll(first(firstVn));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求文法符号x的first集，这里的x是单个文法符号，而不是符号串，思路为若x是终结符，则在返回的集合中加入该终结符并返回。否则对所有以该非终结符为左部的产生式，若产生式中包含直接推出epsilon产生式，则将flag设为true，然后遍历这些产生式右部的第一个文法符号，若是x本身，flag为true且该产生式右部文法符号数大于1，则将x的后一个文法符号压入堆栈；若不是x本身，若是非终结符号，则压入堆栈，若是终结符号，则加入返回集合。遍历结束后查看堆栈，当堆栈不为空的时候，依次将这些非终结符号弹出堆栈并将将这些非终结符号的first集加入返回集合，利用递归实现。</p><h4 id="求文法符号串first集"><a href="#求文法符号串first集" class="headerlink" title="求文法符号串first集"></a>求文法符号串first集</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HashSet&lt;String&gt; <span class="title">firstX</span><span class="params">(ArrayList&lt;String&gt; x)</span></span>&#123;</span><br><span class="line">    HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String s : x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first(s).contains(<span class="string">"epsilon"</span>)) &#123;</span><br><span class="line">            set.addAll(first(s));</span><br><span class="line">            set.remove(<span class="string">"epsilon"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            set.addAll(first(s));</span><br><span class="line">            <span class="keyword">return</span> set;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    set.add(<span class="string">"epsilon"</span>);</span><br><span class="line">    <span class="keyword">return</span>  set;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求文法符号串的first集。该算法比较简单，遍历符号串，将第一个文法符号的first集加入到firstX，若第一个文法符号的first集包含epsilon，则加入第二个文法符号的first集，若第二个能推出空，则加入第三个……以此类推。</p><h4 id="求非终结符的follow集"><a href="#求非终结符的follow集" class="headerlink" title="求非终结符的follow集"></a>求非终结符的follow集</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HashSet&lt;String&gt; <span class="title">follow</span><span class="params">(String x)</span> </span>&#123;</span><br><span class="line">    HashSet&lt;String&gt; ret = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"G"</span>.equals(x)) &#123;</span><br><span class="line">        ret.add(<span class="string">"$"</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, ArrayList&lt;Rproduct&gt;&gt; entry : GPLUS.entrySet()) &#123;</span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            <span class="keyword">for</span> (Rproduct rproduct : entry.getValue()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; rproduct.len; index++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (rproduct.symbol[index].equals(x)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (index &lt; rproduct.len - <span class="number">1</span>) &#123;</span><br><span class="line">                            String next = rproduct.symbol[index + <span class="number">1</span>];</span><br><span class="line">                            <span class="keyword">if</span> (Arrays.asList(vt).contains(next)) &#123;</span><br><span class="line">                                ret.add(next);</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Arrays.asList(vn).contains(next)) &#123;</span><br><span class="line">                                HashSet&lt;String&gt; set = firstX(rproduct.divideR(index + <span class="number">1</span>));</span><br><span class="line">                                <span class="keyword">if</span> (set.contains(<span class="string">"epsilon"</span>)) &#123;</span><br><span class="line">                                    set.remove(<span class="string">"epsilon"</span>);</span><br><span class="line">                                    ret.addAll(set);</span><br><span class="line">                                    stack.add(key);</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    ret.addAll(set);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == rproduct.len - <span class="number">1</span>) &#123;</span><br><span class="line">                            stack.push(key);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stack.empty())&#123;</span><br><span class="line">            String left = stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(!left.equals(x))&#123;</span><br><span class="line">                ret.addAll(follow(left));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求非终结符号的follow集，若是开始符号G，则将”$”加入集合并返回。否则遍历所有产生式，对每个产生式的右部，依次遍历各个文法符号，当找到与x相等的文法符号，取该符号的后继符号，若后继符号为终结符，则将终结符加入x的follow集，否则若是非终结符，则将产生式中该非终结符及其之后的文法符号构成的符号串的first集元素加入到x的follow集，若该非终结符能推出epsilon，则还要将该非终结符压入堆栈。待遍历完成后，对堆栈中的非终结符，依次出栈并递归的将其follow集加入到x的follow集。</p><h4 id="求项集闭包"><a href="#求项集闭包" class="headerlink" title="求项集闭包"></a>求项集闭包</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; getClosure(HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; item)&#123;</span><br><span class="line">    HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; rproducts = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">        String x;</span><br><span class="line">        <span class="comment">/*遍历item，对item中每个产生式右部待移入的文法符号，GPLUS有以其为左部的产生式，若不在item中，则加入*/</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, ArrayList&lt;Rproduct&gt;&gt; entry : item.entrySet()) &#123;</span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            ArrayList&lt;Rproduct&gt; value = entry.getValue();</span><br><span class="line">            <span class="keyword">for</span> (Rproduct rproduct : value) &#123;</span><br><span class="line">                x = rproduct.getNext();</span><br><span class="line">                <span class="keyword">if</span> (GPLUS.containsKey(x)) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; GPLUS.get(x).size(); i++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(!item.containsKey(x) &amp;&amp; !rproducts.containsKey(x))&#123;</span><br><span class="line">                            rproducts.put(x, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (!item.containsKey(x)) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(!rproducts.get(x).contains(GPLUS.get(x).get(i)))&#123;</span><br><span class="line">                                rproducts.get(x).add(GPLUS.get(x).get(i));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!item.get(x).contains(GPLUS.get(x).get(i))) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(!rproducts.containsKey(x))&#123;</span><br><span class="line">                                rproducts.put(x, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span>(!rproducts.get(x).contains(GPLUS.get(x).get(i)))&#123;</span><br><span class="line">                                rproducts.get(x).add(GPLUS.get(x).get(i));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rproducts.size()&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;String, ArrayList&lt;Rproduct&gt;&gt; entry : rproducts.entrySet())&#123;</span><br><span class="line">                String key = entry.getKey();</span><br><span class="line">                ArrayList&lt;Rproduct&gt; value = entry.getValue();</span><br><span class="line">                <span class="keyword">if</span>(value.size() &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(!item.containsKey(key))&#123;</span><br><span class="line">                        item.put(key,<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(Rproduct rproduct : value)&#123;</span><br><span class="line">                        item.get(key).add(rproduct);</span><br><span class="line">                    &#125;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            LrParser.printHs(item);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rproducts.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求项集的项集闭包，遍历输入item的各个产生式，对item中每个产生式右部待移入的文法符号，若增广文法中有以其为左部的产生式并且不再item中，则把这个产生式加入到item中，最终item是一个项目集闭包。</p><h4 id="一个辅助函数：实现深度拷贝"><a href="#一个辅助函数：实现深度拷贝" class="headerlink" title="一个辅助函数：实现深度拷贝"></a>一个辅助函数：实现深度拷贝</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Serializable&gt; <span class="function">T <span class="title">myClone</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">    T clonedObj = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">        clonedObj = (T) ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clonedObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求项目集闭包item对应于x的后继项目集闭包"><a href="#求项目集闭包item对应于x的后继项目集闭包" class="headerlink" title="求项目集闭包item对应于x的后继项目集闭包"></a>求项目集闭包item对应于x的后继项目集闭包</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; go(HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; item, String x)&#123;</span><br><span class="line">    HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; j = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; itemClone = myClone(item);</span><br><span class="line">    <span class="keyword">for</span>(Map.Entry&lt;String, ArrayList&lt;Rproduct&gt;&gt; entry : itemClone.entrySet())&#123;</span><br><span class="line">        String key = entry.getKey();</span><br><span class="line">        ArrayList&lt;Rproduct&gt; value = entry.getValue();</span><br><span class="line">        <span class="keyword">for</span>(Rproduct rproduct : value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rproduct.pointer&lt;rproduct.len)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!j.containsKey(key) &amp;&amp; rproduct.getNext().equals(x))&#123;</span><br><span class="line">                    j.put(key, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">                    rproduct.pointer++;</span><br><span class="line">                    j.get(key).add(rproduct);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rproduct.getNext().equals(x))&#123;</span><br><span class="line">                    rproduct.pointer++;</span><br><span class="line">                    j.get(key).add(rproduct);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> LrParser.getClosure(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求一个项目集闭包item对应于x的后继项目集闭包。遍历item的每一个产生式，若产生式的移入指针指向的文法符号为x，则将该产生式的移入指针后移一位，遍历完成后，对新的item用getClosure函数求其对应的项目集闭包。</p><h4 id="初始化规范化项集族"><a href="#初始化规范化项集族" class="headerlink" title="初始化规范化项集族"></a>初始化规范化项集族</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initC</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; item = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    item.put(<span class="string">"G"</span>,<span class="keyword">new</span> ArrayList&lt;Rproduct&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> Rproduct(<span class="keyword">new</span> String[]&#123;<span class="string">"P"</span>&#125;,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    Queue&lt;Integer&gt; pointer = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    pointer.add(i);</span><br><span class="line">    C.put(i,LrParser.getClosure(item));</span><br><span class="line">    HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; gotoix;</span><br><span class="line">    <span class="keyword">while</span> (!pointer.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">int</span> j = pointer.poll();</span><br><span class="line">        HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; cItem = C.get(j);</span><br><span class="line">        HashMap&lt;String, Integer&gt; flag = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        LrParser.printHs(cItem);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String, ArrayList&lt;Rproduct&gt;&gt; entry : cItem.entrySet())&#123;</span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            ArrayList&lt;Rproduct&gt; value = entry.getValue();</span><br><span class="line">            <span class="keyword">for</span> (Rproduct rproduct : value) &#123;</span><br><span class="line">                String x = rproduct.getNext();</span><br><span class="line">                <span class="keyword">if</span>(x!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    flag.put(x, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String, Integer&gt; entryflag : flag.entrySet())&#123;</span><br><span class="line">            String flagkey = entryflag.getKey();</span><br><span class="line">            HashMap&lt;Integer, String&gt; source = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span>(!<span class="string">"epsilon"</span>.equals(flagkey) &amp;&amp; flagkey!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                gotoix = LrParser.go(C.get(j),flagkey);</span><br><span class="line">                <span class="keyword">int</span> index = LrParser.isinC(gotoix);</span><br><span class="line">                <span class="keyword">if</span>(gotoix != <span class="keyword">null</span> &amp;&amp; index==-<span class="number">1</span>)&#123;</span><br><span class="line">                    C.put(++i,gotoix);</span><br><span class="line">                    pointer.add(i);</span><br><span class="line">                    source.put(j,flagkey);</span><br><span class="line">                    GOTO.put((HashMap&lt;Integer, String&gt;) source.clone(),i);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    source.put(j,flagkey);</span><br><span class="line">                    GOTO.put((HashMap&lt;Integer, String&gt;) source.clone(),index);</span><br><span class="line">                &#125;</span><br><span class="line">                source.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        flag.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化规范项集族，首先将开始符号对应的一条产生式作为状态0加入到规范化项集族，将其状态号加入队列，接下来是while循环，当队列不为空的时候，弹出队首状态j，获取该状态对应的项集闭包，然后遍历该项集闭包中产生式，若产生式对应的移入指针指向的文法符号不为空（epsilon也认为空）设为x，则调用go函数求得该j状态对应项目集闭包对应于x的后继项目集闭包，判断后继项目集闭包是否在规范项集族中，若不在则构造新的状态，并将新状态标号加入队列。当队列为空时，规范化项集族便求出。</p><h4 id="初始化SLR分析表"><a href="#初始化SLR分析表" class="headerlink" title="初始化SLR分析表"></a>初始化SLR分析表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initLrTable</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Map.Entry&lt;Integer, HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt;&gt; entry : C.entrySet())&#123;</span><br><span class="line">        <span class="keyword">int</span> key = entry.getKey();</span><br><span class="line">        HashMap&lt;String, ArrayList&lt;Rproduct&gt;&gt; value = entry.getValue();</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String, ArrayList&lt;Rproduct&gt;&gt; entry2 : value.entrySet())&#123;</span><br><span class="line">            String lP = entry2.getKey();</span><br><span class="line">            ArrayList&lt;Rproduct&gt; rP = entry2.getValue();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;rP.size(); i++)&#123;</span><br><span class="line">                Rproduct rproduct = rP.get(i);</span><br><span class="line">                String variable = rproduct.getNext();</span><br><span class="line">                HashMap&lt;Integer,String&gt; actionKey = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                <span class="keyword">if</span>(variable != <span class="keyword">null</span> &amp;&amp; !<span class="string">"epsilon"</span>.equals(variable))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(Arrays.asList(vt).contains(variable))&#123;</span><br><span class="line">                        actionKey.put(key,variable);</span><br><span class="line">                        <span class="keyword">int</span> des = GOTO.get(actionKey);</span><br><span class="line">                        ACTION.put((HashMap&lt;Integer, String&gt;) actionKey.clone(),<span class="string">"s"</span>+des);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Arrays.asList(vn).contains(variable))&#123;</span><br><span class="line">                        <span class="comment">/*在初始化规范项集族时已求出*/</span></span><br><span class="line">                        actionKey.put(key,variable);</span><br><span class="line">                        <span class="keyword">int</span> des = GOTO.get(actionKey);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    HashSet&lt;String&gt; followLp = follow(lP);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;vt.length; k++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(followLp.contains(vt[k]))&#123;</span><br><span class="line">                            <span class="keyword">if</span>(!<span class="string">"G"</span>.equals(lP))&#123;</span><br><span class="line">                                actionKey.put(key,vt[k]);</span><br><span class="line">                                ACTION.put((HashMap&lt;Integer, String&gt;) actionKey.clone(),<span class="string">"r"</span>+lP+rproduct.no);</span><br><span class="line">                            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                actionKey.put(key,<span class="string">"$"</span>);</span><br><span class="line">                                ACTION.put((HashMap&lt;Integer, String&gt;) actionKey.clone(),<span class="string">"acc"</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        actionKey.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                actionKey.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化slr分析表，遍历求出的规范化项集族，即遍历每个状态j的每一条产生式p，获取该产生式移入指针指向的文法符号x。若x不为空也不为epsilon，则进一步判断该文法符号是否是终结符号，若x是终结符号，填写ACTION表项，即状态j遇到文法符号x执行移入x并进入状态GO(j,x)，若x是非终结符号，填写GOTO表项，即状态j遇到文法符号x进入状态GO(j,x)；若x为空或epsilon，首先求产生式p左部文法符号的follow集，对任何在follow集中的终结符号，若p左部不是开始符号G，填写ACTION表项，即状态j遇到文法符号x按产生式p进行归约；若p左部是开始符号G，则表示语法分析完成，填写ACTION表项即状态j遇到末尾符”$”则acc。</p><h4 id="SLR分析器"><a href="#SLR分析器" class="headerlink" title="SLR分析器"></a>SLR分析器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">slrParser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    reduce.clear();</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> state = <span class="number">0</span>;</span><br><span class="line">    Stack&lt;Integer&gt; stateStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    stateStack.push(state);</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        state = stateStack.peek();</span><br><span class="line">        Word symbol = Word.token.get(index);</span><br><span class="line">        HashMap&lt;Integer,String&gt; s1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        s1.put(state,symbol.getType());</span><br><span class="line">        <span class="keyword">if</span>(ACTION.containsKey(s1))&#123;</span><br><span class="line">            String action = ACTION.get(s1);</span><br><span class="line">            <span class="keyword">if</span>(action.charAt(<span class="number">0</span>) == <span class="string">'s'</span>)&#123;</span><br><span class="line">                stateStack.push(Integer.parseInt(action.substring(<span class="number">1</span>)));</span><br><span class="line">                <span class="keyword">int</span> x = stateStack.peek();</span><br><span class="line">                index++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(action.charAt(<span class="number">0</span>) == <span class="string">'r'</span>)&#123;</span><br><span class="line">                String leftProduct = action.substring(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">int</span> productNo = Integer.parseInt(action.substring(<span class="number">2</span>));</span><br><span class="line">                <span class="keyword">int</span> popLen;</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"epsilon"</span>.equals(GPLUS.get(leftProduct).get(productNo).symbol[<span class="number">0</span>]))&#123;</span><br><span class="line">                    popLen = <span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    popLen = GPLUS.get(leftProduct).get(productNo).len;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(;popLen&gt;<span class="number">0</span>;popLen--)&#123;</span><br><span class="line">                    stateStack.pop();</span><br><span class="line">                    <span class="keyword">int</span> x = stateStack.peek();</span><br><span class="line">                &#125;</span><br><span class="line">                state = stateStack.peek();</span><br><span class="line">                HashMap&lt;Integer,String&gt; s2 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                s2.put(state,leftProduct);</span><br><span class="line">                stateStack.push(GOTO.get(s2));</span><br><span class="line">                reduce.add(leftProduct+<span class="string">"-&gt;"</span>+GPLUS.get(leftProduct).get(productNo).printProduct());</span><br><span class="line">                <span class="keyword">int</span> x = stateStack.peek();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"acc"</span>.equals(action))&#123;</span><br><span class="line">                reduce.add(<span class="string">"G-&gt;P 语法分析完成"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                reduce.add(<span class="string">"语法错误"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            reduce.add(<span class="string">"语法错误"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>slr分析器主程序，初始化一个状态栈，将0状态入栈，进入while(true)循环，获取栈顶状态state，读入词法分析阶段token表第一个单词symbol，若ACTION中存在键(state,symbol)，则获取该键对应的值即移入归约动作，若是移入动作，则将移入symbol后进入的状态压入状态栈；若是归约动作，则按归约所用的产生式归约，具体做法为从状态栈中弹出n个状态，n是归约产生式右部文法符号的个数（epsilon产生式右部文法符号个数认为是0个），并用GOTO表获取此时栈顶状态遇到归约所用产生式左部文法符号时进入的后继状态，并将这个后继状态压入状态栈；若是acc动作，输出语法分析完成，表示输入为正确的语法；对于其他情况，输出error，表示语法错误。</p>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法分析 - 语法制导翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自底向上分析法</title>
      <link href="/amumu547426.github.io/2020/06/28/BottomUpG/"/>
      <url>/amumu547426.github.io/2020/06/28/BottomUpG/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\amumu547426.github.io\assets\css\APlayer.min.css"><script src="\amumu547426.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\amumu547426.github.io\assets\js\Meting.min.js"></script><h2 id="自底向上语法分析技术"><a href="#自底向上语法分析技术" class="headerlink" title="自底向上语法分析技术"></a>自底向上语法分析技术</h2><p>思想：从分析树的底部向顶部方向构造分析树，是将输入串w归约为文法开始符号S的过程。自顶向下语法分析采用最左推导方式，而自底向上的语法分析采用最左归约方式（规范归约）。</p><h3 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h3><p>短语：若S=&gt;*αAβ并且A=&gt;+γ，则称γ是句型αγβ的相对于变量A的短语<br>直接短语：若S=&gt;*αAβ并且A=&gt;γ，则称γ是句型αγβ的相对于变量A的直接短语<br>句柄：若S=&gt;*αAw=&gt;αβw，则称β是句型αβw相对于A→β的直接短语，一个句型的最左直接短语称为该句型的句柄</p><p>在一个最右句型句柄右边只有终结符号，若文法无二义性，那么每个句型都有且只有一个句柄。</p><p>句型的句柄与一个产生式右部相匹配，将句柄归约为该产生式左部非终结符号代表了最右推导中的逆过程的一步。</p><h3 id="规范归约"><a href="#规范归约" class="headerlink" title="规范归约"></a>规范归约</h3><p>设α为文法G的句子，若</p><ul><li>α= <h>α<sub>n</sub></h>&lt;=<h>α<sub>n-1</sub></h>&lt;=……&lt;=<h>α<sub>2</sub></h>&lt;=<h>α<sub>1</sub></h>=S</li><li>对每个i(1≤i≤n)，α$_{i-1}$是将句型α$_i$中的句柄归约后得到的句型</li><li>则称α$_n$，……，α$_1$为α的规范归约序列</li></ul><h3 id="移入-归约分析"><a href="#移入-归约分析" class="headerlink" title="移入-归约分析"></a>移入-归约分析</h3><p>使用一个栈来保存归约/扫描移入的文法符号，栈中符号（自底向上）和待扫描的符号组成了一个最右句型。</p><ul><li>移入：将下一个输入符号移动到栈顶</li><li>归约：将句柄归约为相应的非终结符号，句柄总是在栈顶。具体操作时弹出句柄，压入被归约到的非终结符号。</li><li>接受：宣布分析过程成功完成</li><li>报错：发现语法错误，调用错误恢复子程序</li></ul><h4 id="移入-归约中的存在的问题举例："><a href="#移入-归约中的存在的问题举例：" class="headerlink" title="移入-归约中的存在的问题举例："></a>移入-归约中的存在的问题举例：</h4><p>对于如下文法：</p><p>（1）&lt;S&gt;→var&lt;IDS&gt;:&lt;T&gt;                                                                                      </p><p>（2）&lt;IDS&gt;→i</p><p>（3）&lt;IDS;T&gt;→&lt;IDS&gt;,i</p><p>（4）&lt;T&gt;→real | int</p><div class="table-container"><table><thead><tr><th></th><th>栈</th><th style="text-align:left">剩余输入</th><th>动作</th></tr></thead><tbody><tr><td>1</td><td>&#36;</td><td style="text-align:left">var <h>i<sub>A</sub></h> , <h>i<sub>B</sub></h> : real &#36;</td><td></td></tr><tr><td>2</td><td>&#36;var</td><td style="text-align:left"><h>i<sub>A</sub></h> , <h>i<sub>B</sub></h> : real &#36;</td><td>移入</td></tr><tr><td>3</td><td>&#36;var <h>i<sub>A</sub></h></td><td style="text-align:left">, <h>i<sub>B</sub></h> : real &#36;</td><td>移入</td></tr><tr><td>4</td><td>&#36;var &lt;IDS&gt;</td><td style="text-align:left">, <h>i<sub>B</sub></h> : real &#36;</td><td>按（2）归约</td></tr><tr><td>5</td><td>&#36;var &lt;IDS&gt;,</td><td style="text-align:left"><h>i<sub>B</sub></h> : real &#36;</td><td>移入</td></tr><tr><td>6</td><td>&#36;var &lt;IDS&gt;,<h>i<sub>B</sub></h></td><td style="text-align:left">: real &#36;</td><td>移入</td></tr><tr><td>7</td><td>&#36;var &lt;IDS&gt;,&lt;IDS&gt;</td><td style="text-align:left">: real &#36;</td><td>按（2）归约</td></tr><tr><td>8</td><td>&#36;var &lt;IDS&gt;,&lt;IDS&gt;:</td><td style="text-align:left">real &#36;</td><td>移入</td></tr><tr><td>9</td><td>&#36;var &lt;IDS&gt;,&lt;IDS&gt;:real</td><td style="text-align:left">real &#36;</td><td>移入</td></tr><tr><td>10</td><td>&#36;var &lt;IDS&gt;,&lt;IDS&gt;:&lt;T&gt;</td><td style="text-align:left">&#36;</td><td>按（4）归约，报错</td></tr></tbody></table></div><p>识别的句子显然是属于该文法的，然而分析过程中却报错，是因为在第6步移入的终结符号$i_B$并不是一个句柄，而在第7步对一个错误的句柄进行了归约。</p><p><img src= "/amumu547426.github.io/img/loading.gif" data-src="pic1.png" alt=""></p><p>对于每个句型，都能构造该句型的分析树，上图为第六步的分析树，下面给出关于分析树的一些定义：</p><div class="note secondary">            <p>根节点：文法的开始符号<br>边缘：分析树的边缘为从左到右排列叶节点得到的符号串<br>短语：分析树中每棵子树的边缘称为该句型的一个短语<br>直接短语：若子树只有父子两代结点（高度为2），则该子树的边缘称为该句型的一个直接短语</p>          </div><p>句柄是句型的最左直接短语，它是分析树中某棵高度为2的子树的边缘，在上图所示的对应于第6步的分析树中，$i_B$不是某棵高度为2的子树的边缘。当前句型有两个直接短语：   </p><ul><li>一是以&lt;IDS&gt;为根节点的高度为2的子树的边缘&lt;IDS&gt;,$i_B$</li><li>二是以&lt;T&gt;为根节点的高度为2的子树的边缘real</li></ul><p>最左直接短语即&lt;IDS&gt;,$i_B$为句柄，因此正确做法是将&lt;IDS&gt;,$i_B$归约为&lt;IDS&gt;。</p><h4 id="确定句柄的两种方法"><a href="#确定句柄的两种方法" class="headerlink" title="确定句柄的两种方法"></a>确定句柄的两种方法</h4><ul><li>优先法：根据归约先后次序为句型中相邻文法符号规定优先关系（本文不讨论）</li><li>状态法：根据句柄的识别状态确定句柄，下文的LR分析法即采用状态法</li></ul><h3 id="LR分析法"><a href="#LR分析法" class="headerlink" title="LR分析法"></a>LR分析法</h3><p>LR文法是最大的，可以构造出响应移入-归约语法分析器的文法类。</p><ul><li>L：对输入进行从左至右扫描</li><li>R：反向构造出一个最右推导序列</li></ul><p>LR(k)分析：</p><ul><li>需要向前查看k个输入符号的LR分析（k=0,1具有实践意义）</li></ul><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>句柄是逐步形成的，用状态表示句柄识别的进展程度。例：对于S→bBB：</p><ul><li>S→·bBB    移进状态</li><li>S→b·BB    待约状态</li><li>S→bB·B    待约状态</li><li>S→bBB·    归约状态</li></ul><p>LR分析器基于这样一些状态来构造自动机进行句柄识别。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>LR语法分析器由表格驱动；虽然手工构造表格工作量大，但表格可以自动生成</li><li>对于几乎所有的程序设计语言，只要写出上下文无关文法，就能够构造出识别该构造的LR语法分析器</li><li>最通用的无回溯移入归约分析技术，且和其它技术一样高效</li><li>可以尽早检测到错误</li><li>能分析的文法集合是LL(k)文法的超集，例如上下文无关文法就是正则文法的超集</li></ul><h3 id="分析器总体结构"><a href="#分析器总体结构" class="headerlink" title="分析器总体结构"></a>分析器总体结构</h3><p><img src= "/amumu547426.github.io/img/loading.gif" data-src="pic2.png" alt=""></p><h3 id="LR-0-分析"><a href="#LR-0-分析" class="headerlink" title="LR(0)分析"></a>LR(0)分析</h3><h4 id="LR-0-项和LR-0-自动机"><a href="#LR-0-项和LR-0-自动机" class="headerlink" title="LR(0)项和LR(0)自动机"></a>LR(0)项和LR(0)自动机</h4><p>LR语法分析器的栈中元素包含状态，状态指明了在移入归约分析中的位置。状态是项的集合。</p><p>LR(0)项：</p><ul><li>文法的产生式加上在产生式体某处的一个点，例A→·XYZ，A→X·YZ，A→XY·Z，A→XYZ·</li><li>A→ε只有一个项A→·</li></ul><h4 id="规范LR-0-项集族"><a href="#规范LR-0-项集族" class="headerlink" title="规范LR(0)项集族"></a>规范LR(0)项集族</h4><p>规范LR(0)项集族的项集可作为LR(0)自动机的状态，并以此为基础构造自动机的基础。</p><p>LR(0)语法分析过程：</p><ul><li>状态存放在栈中</li><li>栈中的状态（自底向上）形成自动机的一条路径，路径上的标号就是栈中的文法符号序列</li><li>若到达接受状态，则栈顶某个符号串形成句柄  </li></ul><h5 id="规范LR-0-项集族的构造"><a href="#规范LR-0-项集族的构造" class="headerlink" title="规范LR(0)项集族的构造"></a>规范LR(0)项集族的构造</h5><p>增广文法：G的增广文法G’是在G中增加新的开始符号S’，并加入产生式S’→S得到的。</p><p>用到的子函数：</p><ul><li>CLOSURE(I)：I的项集闭包</li><li>GOTO(I,X)：I的X后继</li></ul><p>CLOSURE(I)构造算法：</p><ul><li>首先将I中的各个项加入到CLOSURE(I)中</li><li>如果A→α·Bβ在CLOSURE(I)中，那么对B的任意产生式B→γ，将B→·γ加到CLOSURE(I)中</li><li>不断重复第二步，直到收敛</li></ul><p>例：增广文法：</p><ul><li>E&#39;→E</li><li>E→E+T | T</li><li>T→T*F | F</li><li>F→（E) | id</li></ul><p>项集{[E‘→E]}的闭包：</p><ul><li>[E&#39;→·E]</li><li>[E→·E+T]，[E→·T]</li><li>[T→·T*F]，[T→·F]</li><li>[F→·(E)]，[F→·id]</li></ul><p>GOTO函数：</p><ul><li>GOTO(I,X)：I中形如[A→α·Xβ]的项对应的项[A→αX·β]的闭包，定义了LR(0)自动机中状态I在X之上的转换</li><li>例：I={[E&#39;→E·],[E→E·+T]}，则GOTO(I,+)：<ul><li>I中第二项·后出现+，对应项为[E→E·+T]</li><li>GOTO(I,+)=CLOSURE({[E→E+·T]})={ [E→E+·T], [T→·T*F], [T→·F], [F→·(E)], [F→·id] }</li></ul></li></ul><p>求增广文法G’的LR(0)项集规范族算法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void items(G&#39;)&#123;</span><br><span class="line">C &#x3D; CLOSURE(&#123;[S&#39;→·S]&#125;);</span><br><span class="line">repeat</span><br><span class="line">for (C中的每个项集I)</span><br><span class="line">for (，每个文法符号X)</span><br><span class="line">if (GOTO(I,X)非空且不在C中)</span><br><span class="line">将GOTO(I,X)加入C中；</span><br><span class="line">until 没有新的项集加入到C</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上例中的增广文法，求出各个规范集族为：</p><p><img src= "/amumu547426.github.io/img/loading.gif" data-src="pic3.png" alt=""></p><h4 id="如何使用LR-0-自动机"><a href="#如何使用LR-0-自动机" class="headerlink" title="如何使用LR(0)自动机"></a>如何使用LR(0)自动机</h4><p>假设文法符号串γ是LR(0)自动机从开始状态运行到状态j路径上的输入符号的串，那么</p><ul><li>若下个输入符号为a，且j状态有一个a上的转换，则移入a</li><li>若j中有形如A→a·的项，则按A→a归约</li><li>若有多种可能，即存在冲突</li></ul><p>LR语法分析表的结构有两部分，动作ACTION和转换GOTO，ACTION(i,a)其中i为状态，a为终结符，表示状态i遇到终结符a应采取的动作；GOTO(i,A)其实i为状态，A为非终结符，表示i遇到归约出的A应进入的状态。下面给出构造LR(0)分析表的算法：</p><p>为表区分，构造规范LR(0)项集族的GOTO函数在这里用GO表示</p><p>sj表示移入终结符号，进入状态j；rj表示按第j个产生式归约</p><ul><li>0为开始状态</li><li>对<h>I<sub>i</sub></h>∈C：<ul><li>if A→α·aβ∈<h>I<sub>i</sub></h> and GO(<h>I<sub>i</sub></h>,a)=<h>I<sub>j</sub></h> then ACTION[i,a] = sj</li><li>if A→α·Bβ∈<h>I<sub>i</sub></h> and GO(<h>I<sub>i</sub></h>,B)=<h>I<sub>j</sub></h> then GOTO[i,B] = j</li><li>if A→α·属于<h>I<sub>i</sub></h>  then<ul><li>for ∀a∈T∪{$} do<ul><li>ACTION[i,a] = rj</li></ul></li></ul></li><li>if S’→S·∈<h>I<sub>i</sub></h> then ACTION[i,$] = acc</li></ul></li><li>空格处为error</li></ul><h5 id="LR语法分析算法"><a href="#LR语法分析算法" class="headerlink" title="LR语法分析算法"></a>LR语法分析算法</h5><p>输入：文法G的LR语法分析表，输入串w</p><p>输出：若w在L(G)中，输出最左归约步骤，否则输出错误提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">令a为w$的第一个符号</span><br><span class="line">while(true)&#123;</span><br><span class="line">令s为栈顶状态;</span><br><span class="line">if(ACTION[s,a] &#x3D; 移入t)&#123;</span><br><span class="line">        将t压入栈中；</span><br><span class="line">        令a为下一个输入符号</span><br><span class="line">&#125;else if(ACTION[s,a] &#x3D; 规约A→β)&#123;</span><br><span class="line">从栈中弹出|β|个符号;</span><br><span class="line">令t为当前栈顶状态;</span><br><span class="line">将GOTO[t,A]压入栈中;</span><br><span class="line">输出产生式A→β</span><br><span class="line">&#125;else if(ACTION[s,a] &#x3D; acc) break;</span><br><span class="line">else 调用错误恢复例程;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用以下例子说明分析过程，分析id*id：</p><div class="table-container"><table><thead><tr><th></th><th>栈</th><th>符号</th><th style="text-align:left">输入</th><th style="text-align:left">动作</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>$</td><td style="text-align:left">id*id$</td><td style="text-align:left">移入id，进入5</td></tr><tr><td>2</td><td>0 5</td><td>$id</td><td style="text-align:left">*id$</td><td style="text-align:left">按F→id归约，5出栈，0遇到F进入3</td></tr><tr><td>3</td><td>0 3</td><td>$F</td><td style="text-align:left">*id$</td><td style="text-align:left">按T→F归约，3出栈，0遇到T进入2</td></tr><tr><td>4</td><td>0 2</td><td>$T</td><td style="text-align:left">*id$</td><td style="text-align:left">移入*，进入7</td></tr><tr><td>5</td><td>0 2 7</td><td>$T*</td><td style="text-align:left">id$</td><td style="text-align:left">移入id，进入5</td></tr><tr><td>6</td><td>0 2 7 5</td><td>$T*id</td><td style="text-align:left">$</td><td style="text-align:left">按F→id归约，5出栈，7遇到F进入10</td></tr><tr><td>7</td><td>0 2 7 10</td><td>$T*F</td><td style="text-align:left">$</td><td style="text-align:left">按T→T*F归约，10，7，2出栈，0遇到T进入2</td></tr><tr><td>8</td><td>0 2</td><td>$T</td><td style="text-align:left">$</td><td style="text-align:left">按E→T归约，2出栈。0遇到E进入1</td></tr><tr><td>9</td><td>0 1</td><td>$E</td><td style="text-align:left">$</td><td style="text-align:left">接受</td></tr></tbody></table></div><h4 id="LR-0-分析过程中的冲突"><a href="#LR-0-分析过程中的冲突" class="headerlink" title="LR(0)分析过程中的冲突"></a>LR(0)分析过程中的冲突</h4><p>对于该部分采用的增广文法的例子，观察其LR(0)自动机状态转换图可以发现，在<h>I<sub>2</sub></h>和<h>I<sub>9</sub></h>中在下一个输入符号为*的情况下，不知道是该采取归约动作还是移入动作  。若LR(0)分析表中没有语法分析动作的冲入，则称其为LR(0)文法。不是所有的CFG都能用LR(0)方法分析。</p>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语法制导翻译</title>
      <link href="/amumu547426.github.io/2020/06/21/SDD/"/>
      <url>/amumu547426.github.io/2020/06/21/SDD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\amumu547426.github.io\assets\css\APlayer.min.css"><script src="\amumu547426.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\amumu547426.github.io\assets\js\Meting.min.js"></script><h1 id="语法制导翻译"><a href="#语法制导翻译" class="headerlink" title="语法制导翻译"></a>语法制导翻译</h1><p>翻译的任务是语义分析和正确性检查，若正确，则翻译成中间代码或目标代码。</p><p>基本思想：</p><ul><li>语法结构具有规定的语义</li><li>根据翻译的需要设置文法符号的属性，已描述语法结构的语义<ul><li>例如一个变量的属性有类型，层次，存储地址等。表达式属性有类型，值</li></ul></li><li>属性值的计算和产生式相联系，随着语法分析的进行，执行属性值的计算，完成语义分析和翻译的任务</li></ul><p>语法制导定义SDD是上下文无关文发CFG和属性/规则的结合，属性和文法符号相关联，规则和产生式相关联。</p><p>语法制导翻译是在产生式体中加入语义动作，并在适当的时候执行这些语义动作。</p><h2 id="语法制导定义SDD"><a href="#语法制导定义SDD" class="headerlink" title="语法制导定义SDD"></a>语法制导定义SDD</h2><p>语义分析的任务：</p><ul><li>语义检查<ul><li>例：类型、运算、维数、越界</li></ul></li><li>语义处理<ul><li>例：变量的存储分配、表达式求值、语句的翻译（中间代码的生成）</li></ul></li></ul><p>处理办法有两种：</p><ul><li>对每一个产生式编制一个语义子程序，当一个产生式获得匹配时，调用相应的语义子程序实现语义检查与翻译<ul><li>E→<h>E<sub>1</sub></h>+T       E.val:=E.val+T.val</li><li>T→<h>T<sub>1</sub></h>*F       <h>T<sub>1</sub></h>.val:=E.val*F.val</li><li>F→id                             F.val:=id.val</li></ul></li><li><p>适合在完成归约时进行</p></li><li><p>在产生式右部适当位置，插入相应的语义动作，按照分析的进程，执行遇到的语义动作</p><ul><li>D→T {L.in:=T.type} L</li><li>T→int {T.type:=integer}</li><li>T→real {T.type:=real}</li><li>L→{<h>L<sub>1</sub></h>.inh:=L.inh}<h>L<sub>1</sub></h>, id{…}</li></ul></li><li>适合在进行推导时完成</li></ul><h3 id="继承属性和综合属性"><a href="#继承属性和综合属性" class="headerlink" title="继承属性和综合属性"></a>继承属性和综合属性</h3><p>综合属性：分析树结点N上的非终结符号A的属性值由N的产生式所关联的语义规则定义，又称S-属性定义。必然通过N的子结点或N本身的属性值来定义。</p><p>继承属性：分析树结点N的属性值由N的父节点所关联的语义规则来定义，又称为L-属性定义。依赖于N的父结点，N本身和N的兄弟结点上的属性值。</p><p>不允许N的继承属性通过N的子结点上的属性来定义，但允许N的综合属性依赖于N本身的继承属性。终结符号有综合属性，但没有继承属性。</p><h4 id="S属性的SDD，可以按照自底向上方式求值："><a href="#S属性的SDD，可以按照自底向上方式求值：" class="headerlink" title="S属性的SDD，可以按照自底向上方式求值："></a>S属性的SDD，可以按照自底向上方式求值：</h4><div class="table-container"><table><thead><tr><th>产生式</th><th>语义规则</th></tr></thead><tbody><tr><td>L→E n</td><td>L.val = E.val</td></tr><tr><td>E→<h>E<sub>1</sub></h>+T</td><td>E.val = <h>E<sub>1</sub></h>.val+T.val</td></tr><tr><td>E→T</td><td>E.val = T.val</td></tr><tr><td>T→<h>T<sub>1</sub></h>*F</td><td>T.val = <h>T<sub>1</sub></h>.val*F.val</td></tr><tr><td>T→F</td><td>T.val = F.va;</td></tr><tr><td>F→(E)</td><td>F.val = E.val</td></tr><tr><td>F→digit</td><td>F.val = digit.lexval</td></tr></tbody></table></div><p>输入3*5+4n的注释语法分析树：</p><p><img src= "/amumu547426.github.io/img/loading.gif" data-src="pic1.png" alt=""></p><h4 id="适用自顶向下分析的SDD，带有综合属性的SDD："><a href="#适用自顶向下分析的SDD，带有综合属性的SDD：" class="headerlink" title="适用自顶向下分析的SDD，带有综合属性的SDD："></a>适用自顶向下分析的SDD，带有综合属性的SDD：</h4><p>例如如下消除左递归的表达式文法</p><ul><li>T→FT&#39;</li><li>T&#39;→*F<h>T<sub>1</sub></h>&#39;</li><li>T&#39;→ε</li><li>F→digit</li></ul><p>T中不含运算符，无法直接使用综合属性。</p><div class="table-container"><table><thead><tr><th>产生式</th><th>语义规则</th></tr></thead><tbody><tr><td>T→FT&#39;</td><td>T&#39;.inh = F.val <br> T.val = T&#39;.syn</td></tr><tr><td>T&#39;→*F<h>T<sub>1</sub></h>&#39;</td><td><h>T<sub>1</sub></h>&#39;.inh = T&#39;.inh*F.val  <br> T&#39;.syn = <h>T<sub>1</sub></h>&#39;.syn</td></tr><tr><td>T&#39;→ε</td><td>T&#39;.syn = T&#39;.inh</td></tr><tr><td>F→digit</td><td>F.val = digit.lexval</td></tr></tbody></table></div><p>  <img src= "/amumu547426.github.io/img/loading.gif" data-src="pic2.png" alt=""><br>  <img src= "/amumu547426.github.io/img/loading.gif" data-src="pic3.png" alt=""></p><h3 id="SDD的求值顺序"><a href="#SDD的求值顺序" class="headerlink" title="SDD的求值顺序"></a>SDD的求值顺序</h3><p>依赖图描述了某棵特定的分析树上各个属性实例之间的信息流。</p><p>依赖图的构造：</p><ul><li>对分析树每个结点X，对与X对应的文法符号的每个属性a，在依赖图中为a构造一个结点</li><li>若属性X.a的值依赖于Y.b的值，则构造一条从Y.b指向X.a的有向边</li></ul><p>形如a*b的语法分析树：</p><p>  <img src= "/amumu547426.github.io/img/loading.gif" data-src="pic4.png" alt=""></p><p>可能的计算顺序：1,2,3,4,5,6,7,8,9或1,3,5,2,4,6,7,8,9</p><p>属性值计算顺序可以按依赖图的拓扑排序来计算，图中不能存在环。给定一个SDD很难判定是否存在一颗分析树，其对应的依赖图包含环。而特定的SDD一定不包含环，且具有固定的排序模式—S属性SDD和L属性SDD</p><h4 id="S属性的SDD"><a href="#S属性的SDD" class="headerlink" title="S属性的SDD"></a>S属性的SDD</h4><ul><li>每个属性都是综合属性</li><li>都是根据子构造的属性计算整个构造的属性</li><li>在依赖图中，通过子结点的属性计算父结点的属性<ul><li>自底向上方法：在构造分析树子结点同时计算相关属性</li><li>自顶向下方法：在递归子程序法中，在过程A()的最后计算A得属性</li></ul></li></ul><p>在分析树上自底向上计算SDD时，可采用后序遍历。</p><h4 id="L属性的SDD"><a href="#L属性的SDD" class="headerlink" title="L属性的SDD"></a>L属性的SDD</h4><ul><li>每个属性<ul><li>要么是综合属性</li><li>要么是继承属性，且产生式A→<h>X<sub>1</sub></h><h>X2</h>…<h>X<sub>n</sub></h>中<h>X<sub>i</sub></h>的继承属性仅依赖于<ul><li>A的继承属性</li><li><h>X<sub>i</sub></h>左边符号<h>X<sub>1</sub></h>，<h>X<sub>2</sub></h>，…<h>X<sub>i-1</sub></h>的属性</li><li><h>X<sub>i</sub></h>本身的属性，但<h>X<sub>i</sub></h>的全部属性不能在依赖图中形成环路</li></ul></li></ul></li></ul><p>在依赖图中看，依赖图的边只能从左到右，不能从右到左。</p><h2 id="语法制导翻译方案SDT"><a href="#语法制导翻译方案SDT" class="headerlink" title="语法制导翻译方案SDT"></a>语法制导翻译方案SDT</h2><p>语法制导翻译方案SDT是在产生式体中嵌入程序片段（语义动作）的上下文无关文法。</p><p>SDT的基本实现方法是建立语法分析树，然后从左向右，深度优先的执行这些动作。用SDT实现两类重要的SDD：</p><ul><li>基本文法为LR的，SDD是S属性的</li><li>基本文法是LL的，SDD是L属性的</li></ul><h4 id="后缀翻译方案：S-SDD转SDT"><a href="#后缀翻译方案：S-SDD转SDT" class="headerlink" title="后缀翻译方案：S-SDD转SDT"></a>后缀翻译方案：S-SDD转SDT</h4><p>文法可以自底向上分析且SDD是S属性的，可以构造出SDT，所有动作都放在产生式最后，分析过程中按照这个产生式规约时执行这个动作，计算得到的属性值放在栈中。所有动作都放在产生式右端的SDT称为后缀翻译方案。</p><p>例子：</p><p>L→E n                      {print(E.val);}  </p><p>E→<h>E<sub>1</sub></h>+T   {E.val = <h>E<sub>1</sub></h>.val+T.val:}  </p><p>E→T                         {E.val = T.val;}  </p><p>T→<h>T<sub>1</sub></h>*F   {T.val = <h>T<sub>1</sub></h>.val*F.val;}  </p><p>T→F                         {T.val = F.val;}  </p><p>F→(E)                       {F.val = E.val;}  </p><p>F→digit                    {F.val = digit.lexval;}</p><p>可以再LR语法分析过程中实现：</p><ul><li>归约时执行相应语义动作</li><li>定义可以记录各个文法符号的属性的union结构</li><li>栈中每个文法符号附带一个union结构</li><li>按照产生式A→XYZ归约时，Z的属性可以再栈顶找到，Y的属性在下个位置，X的属性在下下个位置</li></ul><h4 id="L属性定义的SDT"><a href="#L属性定义的SDT" class="headerlink" title="L属性定义的SDT"></a>L属性定义的SDT</h4><ul><li>将计算非终结符号A的继承属性的动作放在产生式中紧靠A之前，如果A有多个属性，要注意属性的计算顺序</li><li>将计算产生式头的综合属性的动作放在产生式的右端</li></ul><p>L属性SDT例子：</p><p>  <img src= "/amumu547426.github.io/img/loading.gif" data-src="pic5.png" alt=""><br>  <img src= "/amumu547426.github.io/img/loading.gif" data-src="pic6.png" alt=""></p><p>L-SDD的SDT实现</p><p>若一个L-SDD的基本文法可以使用LL分析技术，则它的SDT可以在LL或LR语法分析过程中实现，即可在</p><ul><li>非递归预测分析过程中进行语义翻译</li><li>递归预测分析过程中进行语义翻译</li><li>LR分析过程中进行语义翻译</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译方案 </tag>
            
            <tag> 语法制导翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自顶向下分析-LL(1)文法</title>
      <link href="/amumu547426.github.io/2020/06/13/TopDownG/"/>
      <url>/amumu547426.github.io/2020/06/13/TopDownG/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\amumu547426.github.io\assets\css\APlayer.min.css"><script src="\amumu547426.github.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\amumu547426.github.io\assets\js\Meting.min.js"></script><h3 id="LL-1-文法"><a href="#LL-1-文法" class="headerlink" title="LL(1)文法"></a>LL(1)文法</h3><h4 id="自顶向下分析法希望文法满足的条件"><a href="#自顶向下分析法希望文法满足的条件" class="headerlink" title="自顶向下分析法希望文法满足的条件"></a>自顶向下分析法希望文法满足的条件</h4><p>从左至右扫描输入串，寻找它的一个最左推导；对于G的每个非终结符A，若A有多个不同的候选式时，在选择产生某个终结符号时能唯一选定一个。给定文法S→cAd，A→ab|a，A的候选式ab和a具有相同首部终结符号，LL(1)文法希望避免这种文法。</p><h4 id="串首终结符集-FIRST集"><a href="#串首终结符集-FIRST集" class="headerlink" title="串首终结符集-FIRST集"></a>串首终结符集-FIRST集</h4><p>FIRST(α)即关于α的所有产生式右部第一个遇到终结符。FIRST(α)={a|α=*&gt;a…,a∈$V_t$*}</p><p>求FIRST集的算法</p><ul><li>令α=$X_1$…$X_n$</li><li>初值：<ul><li>FIRST(α)=FIRST($X_1$)-{ε}</li><li>k=1</li></ul></li><li>循环<ul><li>while ε∈FIRST($X_k$) &amp;&amp; k&lt;n  do<ul><li>FIRST(α)=FIRST(α)∪(FIRST($X_{k+1}$)-{ε}) </li><li>k = k+1</li></ul></li></ul></li><li>结束<ul><li>if k==n &amp;&amp; ε∈FIRST($X_k$) then FIRST(α)=FIRST(α)∪{ε}</li></ul></li></ul><h4 id="非终结符后继符号集-FOLLOW集"><a href="#非终结符后继符号集-FOLLOW集" class="headerlink" title="非终结符后继符号集-FOLLOW集"></a>非终结符后继符号集-FOLLOW集</h4><p>FOLLOW(A)即非终结符A的后续符号集。FOLLOW(A)={a|S=<em>&gt;…Aa…,a∈$V_t$\</em>}</p><p>求FOLLOW集的算法</p><ul><li>若B→αAaβ，a是终结符，则把a放入FOLLOW(A)中</li><li>若B→αAXβ，X是非终结符，则把FIRST(Xβ)放入FOLLOW(A)中</li><li>若B→αA或B→αAβ，但β=&gt;ε，则把FOLLOW(B)放入FOLLOW(A)中</li><li>若S是开始符，则$∈FOLLOW(S)</li><li>若A→αBβ，则FIRST(β)中除了ε之外所有符号均在FOLLOW(B)中</li><li>若A→αB或A→αBβ，且FIRST(β)包含ε，则FOLLOW(A)所有符号均在FOLLOW(B)中</li></ul><h4 id="产生式可选集-SELECT集"><a href="#产生式可选集-SELECT集" class="headerlink" title="产生式可选集-SELECT集"></a>产生式可选集-SELECT集</h4><ul><li>产生式A→β的可选集是指可以选用该产生式进行推导时对应的输入符号集合，记为SELECT(A→β)<ul><li>SELECT(A→αβ)={α}</li><li>SELECT(A→ε)=FOLLOW(A)</li></ul></li></ul><h4 id="LL-1-文法-1"><a href="#LL-1-文法-1" class="headerlink" title="LL(1)文法"></a>LL(1)文法</h4><p>对G中任意变量A，A→$a_1$|$a_2$|…|$a_n$是A的所有产生式，若他们满足</p><ul><li>FIRST($a_i$)∩FIRST($a_j$) =Φ       i≠ j</li><li>当ε∈FIRST($a_j$)时，FOLLOW(A)∩FIRST($a_j$)=Φ</li></ul><p>则称G为LL(1)文法。</p><h4 id="LL-1-文法分析原理"><a href="#LL-1-文法分析原理" class="headerlink" title="LL(1)文法分析原理"></a>LL(1)文法分析原理</h4><p><img src= "/amumu547426.github.io/img/loading.gif" data-src="im1.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法分析 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
